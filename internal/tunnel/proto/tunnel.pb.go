// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/tunnel.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enums for type safety
type RequestType int32

const (
	RequestType_REQUEST_TYPE_UNKNOWN RequestType = 0
	RequestType_REQUEST_TYPE_API     RequestType = 1
	RequestType_REQUEST_TYPE_STATIC  RequestType = 2
	RequestType_REQUEST_TYPE_MEDIA   RequestType = 3
	RequestType_REQUEST_TYPE_STREAM  RequestType = 4
)

// Enum value maps for RequestType.
var (
	RequestType_name = map[int32]string{
		0: "REQUEST_TYPE_UNKNOWN",
		1: "REQUEST_TYPE_API",
		2: "REQUEST_TYPE_STATIC",
		3: "REQUEST_TYPE_MEDIA",
		4: "REQUEST_TYPE_STREAM",
	}
	RequestType_value = map[string]int32{
		"REQUEST_TYPE_UNKNOWN": 0,
		"REQUEST_TYPE_API":     1,
		"REQUEST_TYPE_STATIC":  2,
		"REQUEST_TYPE_MEDIA":   3,
		"REQUEST_TYPE_STREAM":  4,
	}
)

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}

func (x RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tunnel_proto_enumTypes[0].Descriptor()
}

func (RequestType) Type() protoreflect.EnumType {
	return &file_proto_tunnel_proto_enumTypes[0]
}

func (x RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestType.Descriptor instead.
func (RequestType) EnumDescriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{0}
}

type Priority int32

const (
	Priority_PRIORITY_UNKNOWN  Priority = 0
	Priority_PRIORITY_LOW      Priority = 1
	Priority_PRIORITY_NORMAL   Priority = 2
	Priority_PRIORITY_HIGH     Priority = 3
	Priority_PRIORITY_CRITICAL Priority = 4
)

// Enum value maps for Priority.
var (
	Priority_name = map[int32]string{
		0: "PRIORITY_UNKNOWN",
		1: "PRIORITY_LOW",
		2: "PRIORITY_NORMAL",
		3: "PRIORITY_HIGH",
		4: "PRIORITY_CRITICAL",
	}
	Priority_value = map[string]int32{
		"PRIORITY_UNKNOWN":  0,
		"PRIORITY_LOW":      1,
		"PRIORITY_NORMAL":   2,
		"PRIORITY_HIGH":     3,
		"PRIORITY_CRITICAL": 4,
	}
)

func (x Priority) Enum() *Priority {
	p := new(Priority)
	*p = x
	return p
}

func (x Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tunnel_proto_enumTypes[1].Descriptor()
}

func (Priority) Type() protoreflect.EnumType {
	return &file_proto_tunnel_proto_enumTypes[1]
}

func (x Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Priority.Descriptor instead.
func (Priority) EnumDescriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{1}
}

type CacheStatus int32

const (
	CacheStatus_CACHE_STATUS_UNKNOWN CacheStatus = 0
	CacheStatus_CACHE_STATUS_MISS    CacheStatus = 1
	CacheStatus_CACHE_STATUS_HIT     CacheStatus = 2
	CacheStatus_CACHE_STATUS_BYPASS  CacheStatus = 3
)

// Enum value maps for CacheStatus.
var (
	CacheStatus_name = map[int32]string{
		0: "CACHE_STATUS_UNKNOWN",
		1: "CACHE_STATUS_MISS",
		2: "CACHE_STATUS_HIT",
		3: "CACHE_STATUS_BYPASS",
	}
	CacheStatus_value = map[string]int32{
		"CACHE_STATUS_UNKNOWN": 0,
		"CACHE_STATUS_MISS":    1,
		"CACHE_STATUS_HIT":     2,
		"CACHE_STATUS_BYPASS":  3,
	}
)

func (x CacheStatus) Enum() *CacheStatus {
	p := new(CacheStatus)
	*p = x
	return p
}

func (x CacheStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tunnel_proto_enumTypes[2].Descriptor()
}

func (CacheStatus) Type() protoreflect.EnumType {
	return &file_proto_tunnel_proto_enumTypes[2]
}

func (x CacheStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheStatus.Descriptor instead.
func (CacheStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{2}
}

type TunnelState int32

const (
	TunnelState_TUNNEL_STATE_UNKNOWN       TunnelState = 0
	TunnelState_TUNNEL_STATE_CONNECTING    TunnelState = 1
	TunnelState_TUNNEL_STATE_CONNECTED     TunnelState = 2
	TunnelState_TUNNEL_STATE_DISCONNECTING TunnelState = 3
	TunnelState_TUNNEL_STATE_ERROR         TunnelState = 4
)

// Enum value maps for TunnelState.
var (
	TunnelState_name = map[int32]string{
		0: "TUNNEL_STATE_UNKNOWN",
		1: "TUNNEL_STATE_CONNECTING",
		2: "TUNNEL_STATE_CONNECTED",
		3: "TUNNEL_STATE_DISCONNECTING",
		4: "TUNNEL_STATE_ERROR",
	}
	TunnelState_value = map[string]int32{
		"TUNNEL_STATE_UNKNOWN":       0,
		"TUNNEL_STATE_CONNECTING":    1,
		"TUNNEL_STATE_CONNECTED":     2,
		"TUNNEL_STATE_DISCONNECTING": 3,
		"TUNNEL_STATE_ERROR":         4,
	}
)

func (x TunnelState) Enum() *TunnelState {
	p := new(TunnelState)
	*p = x
	return p
}

func (x TunnelState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tunnel_proto_enumTypes[3].Descriptor()
}

func (TunnelState) Type() protoreflect.EnumType {
	return &file_proto_tunnel_proto_enumTypes[3]
}

func (x TunnelState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelState.Descriptor instead.
func (TunnelState) EnumDescriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{3}
}

type HealthStatus int32

const (
	HealthStatus_HEALTH_STATUS_UNKNOWN         HealthStatus = 0
	HealthStatus_HEALTH_STATUS_SERVING         HealthStatus = 1
	HealthStatus_HEALTH_STATUS_NOT_SERVING     HealthStatus = 2
	HealthStatus_HEALTH_STATUS_SERVICE_UNKNOWN HealthStatus = 3
)

// Enum value maps for HealthStatus.
var (
	HealthStatus_name = map[int32]string{
		0: "HEALTH_STATUS_UNKNOWN",
		1: "HEALTH_STATUS_SERVING",
		2: "HEALTH_STATUS_NOT_SERVING",
		3: "HEALTH_STATUS_SERVICE_UNKNOWN",
	}
	HealthStatus_value = map[string]int32{
		"HEALTH_STATUS_UNKNOWN":         0,
		"HEALTH_STATUS_SERVING":         1,
		"HEALTH_STATUS_NOT_SERVING":     2,
		"HEALTH_STATUS_SERVICE_UNKNOWN": 3,
	}
)

func (x HealthStatus) Enum() *HealthStatus {
	p := new(HealthStatus)
	*p = x
	return p
}

func (x HealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tunnel_proto_enumTypes[4].Descriptor()
}

func (HealthStatus) Type() protoreflect.EnumType {
	return &file_proto_tunnel_proto_enumTypes[4]
}

func (x HealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatus.Descriptor instead.
func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{4}
}

// Main message wrapper - all tunnel communication uses this
type TunnelMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for request-response correlation
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Message timestamp for debugging and monitoring
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Message type (oneof ensures type safety)
	//
	// Types that are valid to be assigned to MessageType:
	//
	//	*TunnelMessage_HttpRequest
	//	*TunnelMessage_HttpResponse
	//	*TunnelMessage_Control
	//	*TunnelMessage_Error
	MessageType   isTunnelMessage_MessageType `protobuf_oneof:"message_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TunnelMessage) Reset() {
	*x = TunnelMessage{}
	mi := &file_proto_tunnel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelMessage) ProtoMessage() {}

func (x *TunnelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelMessage.ProtoReflect.Descriptor instead.
func (*TunnelMessage) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *TunnelMessage) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *TunnelMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TunnelMessage) GetMessageType() isTunnelMessage_MessageType {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *TunnelMessage) GetHttpRequest() *HTTPRequest {
	if x != nil {
		if x, ok := x.MessageType.(*TunnelMessage_HttpRequest); ok {
			return x.HttpRequest
		}
	}
	return nil
}

func (x *TunnelMessage) GetHttpResponse() *HTTPResponse {
	if x != nil {
		if x, ok := x.MessageType.(*TunnelMessage_HttpResponse); ok {
			return x.HttpResponse
		}
	}
	return nil
}

func (x *TunnelMessage) GetControl() *TunnelControl {
	if x != nil {
		if x, ok := x.MessageType.(*TunnelMessage_Control); ok {
			return x.Control
		}
	}
	return nil
}

func (x *TunnelMessage) GetError() *ErrorMessage {
	if x != nil {
		if x, ok := x.MessageType.(*TunnelMessage_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isTunnelMessage_MessageType interface {
	isTunnelMessage_MessageType()
}

type TunnelMessage_HttpRequest struct {
	HttpRequest *HTTPRequest `protobuf:"bytes,10,opt,name=http_request,json=httpRequest,proto3,oneof"`
}

type TunnelMessage_HttpResponse struct {
	HttpResponse *HTTPResponse `protobuf:"bytes,11,opt,name=http_response,json=httpResponse,proto3,oneof"`
}

type TunnelMessage_Control struct {
	Control *TunnelControl `protobuf:"bytes,12,opt,name=control,proto3,oneof"`
}

type TunnelMessage_Error struct {
	Error *ErrorMessage `protobuf:"bytes,13,opt,name=error,proto3,oneof"`
}

func (*TunnelMessage_HttpRequest) isTunnelMessage_MessageType() {}

func (*TunnelMessage_HttpResponse) isTunnelMessage_MessageType() {}

func (*TunnelMessage_Control) isTunnelMessage_MessageType() {}

func (*TunnelMessage_Error) isTunnelMessage_MessageType() {}

// HTTP Request forwarding
type HTTPRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// HTTP method (GET, POST, etc.)
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// Request path and query string
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// HTTP headers as key-value pairs
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Request body (binary-safe)
	Body []byte `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	// Client IP for logging/security
	ClientIp string `protobuf:"bytes,5,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	// Request metadata
	Metadata      *RequestMetadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPRequest) Reset() {
	*x = HTTPRequest{}
	mi := &file_proto_tunnel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequest) ProtoMessage() {}

func (x *HTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequest.ProtoReflect.Descriptor instead.
func (*HTTPRequest) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *HTTPRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *HTTPRequest) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *HTTPRequest) GetMetadata() *RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// HTTP Response forwarding
type HTTPResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// HTTP status code
	StatusCode int32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// HTTP status text
	StatusText string `protobuf:"bytes,2,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"`
	// Response headers
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Response body (binary-safe)
	Body []byte `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	// Response metadata
	Metadata      *ResponseMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPResponse) Reset() {
	*x = HTTPResponse{}
	mi := &file_proto_tunnel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponse) ProtoMessage() {}

func (x *HTTPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponse.ProtoReflect.Descriptor instead.
func (*HTTPResponse) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{2}
}

func (x *HTTPResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HTTPResponse) GetStatusText() string {
	if x != nil {
		return x.StatusText
	}
	return ""
}

func (x *HTTPResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *HTTPResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Request metadata for performance tracking
type RequestMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Request type classification
	Type RequestType `protobuf:"varint,1,opt,name=type,proto3,enum=tunnel.RequestType" json:"type,omitempty"`
	// Expected response size (for optimization)
	ExpectedSize int64 `protobuf:"varint,2,opt,name=expected_size,json=expectedSize,proto3" json:"expected_size,omitempty"`
	// Priority level (for load balancing)
	Priority Priority `protobuf:"varint,3,opt,name=priority,proto3,enum=tunnel.Priority" json:"priority,omitempty"`
	// Timeout preference
	TimeoutSeconds int32 `protobuf:"varint,4,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RequestMetadata) Reset() {
	*x = RequestMetadata{}
	mi := &file_proto_tunnel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMetadata) ProtoMessage() {}

func (x *RequestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMetadata.ProtoReflect.Descriptor instead.
func (*RequestMetadata) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{3}
}

func (x *RequestMetadata) GetType() RequestType {
	if x != nil {
		return x.Type
	}
	return RequestType_REQUEST_TYPE_UNKNOWN
}

func (x *RequestMetadata) GetExpectedSize() int64 {
	if x != nil {
		return x.ExpectedSize
	}
	return 0
}

func (x *RequestMetadata) GetPriority() Priority {
	if x != nil {
		return x.Priority
	}
	return Priority_PRIORITY_UNKNOWN
}

func (x *RequestMetadata) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

// Response metadata for monitoring
type ResponseMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Processing time on local service
	ProcessingTimeMs int64 `protobuf:"varint,1,opt,name=processing_time_ms,json=processingTimeMs,proto3" json:"processing_time_ms,omitempty"`
	// Response size
	ResponseSize int64 `protobuf:"varint,2,opt,name=response_size,json=responseSize,proto3" json:"response_size,omitempty"`
	// Cache status
	CacheStatus   CacheStatus `protobuf:"varint,3,opt,name=cache_status,json=cacheStatus,proto3,enum=tunnel.CacheStatus" json:"cache_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseMetadata) Reset() {
	*x = ResponseMetadata{}
	mi := &file_proto_tunnel_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMetadata) ProtoMessage() {}

func (x *ResponseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMetadata.ProtoReflect.Descriptor instead.
func (*ResponseMetadata) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{4}
}

func (x *ResponseMetadata) GetProcessingTimeMs() int64 {
	if x != nil {
		return x.ProcessingTimeMs
	}
	return 0
}

func (x *ResponseMetadata) GetResponseSize() int64 {
	if x != nil {
		return x.ResponseSize
	}
	return 0
}

func (x *ResponseMetadata) GetCacheStatus() CacheStatus {
	if x != nil {
		return x.CacheStatus
	}
	return CacheStatus_CACHE_STATUS_UNKNOWN
}

// Tunnel control messages
type TunnelControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ControlType:
	//
	//	*TunnelControl_Handshake
	//	*TunnelControl_Status
	//	*TunnelControl_Config
	//	*TunnelControl_Metrics
	ControlType   isTunnelControl_ControlType `protobuf_oneof:"control_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TunnelControl) Reset() {
	*x = TunnelControl{}
	mi := &file_proto_tunnel_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelControl) ProtoMessage() {}

func (x *TunnelControl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelControl.ProtoReflect.Descriptor instead.
func (*TunnelControl) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{5}
}

func (x *TunnelControl) GetControlType() isTunnelControl_ControlType {
	if x != nil {
		return x.ControlType
	}
	return nil
}

func (x *TunnelControl) GetHandshake() *TunnelHandshake {
	if x != nil {
		if x, ok := x.ControlType.(*TunnelControl_Handshake); ok {
			return x.Handshake
		}
	}
	return nil
}

func (x *TunnelControl) GetStatus() *TunnelStatus {
	if x != nil {
		if x, ok := x.ControlType.(*TunnelControl_Status); ok {
			return x.Status
		}
	}
	return nil
}

func (x *TunnelControl) GetConfig() *TunnelConfig {
	if x != nil {
		if x, ok := x.ControlType.(*TunnelControl_Config); ok {
			return x.Config
		}
	}
	return nil
}

func (x *TunnelControl) GetMetrics() *TunnelMetrics {
	if x != nil {
		if x, ok := x.ControlType.(*TunnelControl_Metrics); ok {
			return x.Metrics
		}
	}
	return nil
}

type isTunnelControl_ControlType interface {
	isTunnelControl_ControlType()
}

type TunnelControl_Handshake struct {
	Handshake *TunnelHandshake `protobuf:"bytes,1,opt,name=handshake,proto3,oneof"`
}

type TunnelControl_Status struct {
	Status *TunnelStatus `protobuf:"bytes,2,opt,name=status,proto3,oneof"`
}

type TunnelControl_Config struct {
	Config *TunnelConfig `protobuf:"bytes,3,opt,name=config,proto3,oneof"`
}

type TunnelControl_Metrics struct {
	Metrics *TunnelMetrics `protobuf:"bytes,4,opt,name=metrics,proto3,oneof"`
}

func (*TunnelControl_Handshake) isTunnelControl_ControlType() {}

func (*TunnelControl_Status) isTunnelControl_ControlType() {}

func (*TunnelControl_Config) isTunnelControl_ControlType() {}

func (*TunnelControl_Metrics) isTunnelControl_ControlType() {}

// Initial tunnel handshake
type TunnelHandshake struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Authentication token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Domain to tunnel
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// Target port on client
	TargetPort int32 `protobuf:"varint,3,opt,name=target_port,json=targetPort,proto3" json:"target_port,omitempty"`
	// Client capabilities
	Capabilities []string `protobuf:"bytes,4,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Client version for compatibility
	ClientVersion string `protobuf:"bytes,5,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TunnelHandshake) Reset() {
	*x = TunnelHandshake{}
	mi := &file_proto_tunnel_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelHandshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelHandshake) ProtoMessage() {}

func (x *TunnelHandshake) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelHandshake.ProtoReflect.Descriptor instead.
func (*TunnelHandshake) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{6}
}

func (x *TunnelHandshake) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TunnelHandshake) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *TunnelHandshake) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

func (x *TunnelHandshake) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *TunnelHandshake) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

// Tunnel status updates
type TunnelStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current tunnel state
	State TunnelState `protobuf:"varint,1,opt,name=state,proto3,enum=tunnel.TunnelState" json:"state,omitempty"`
	// Active connections count
	ActiveConnections int32 `protobuf:"varint,2,opt,name=active_connections,json=activeConnections,proto3" json:"active_connections,omitempty"`
	// Last activity timestamp
	LastActivity int64 `protobuf:"varint,3,opt,name=last_activity,json=lastActivity,proto3" json:"last_activity,omitempty"`
	// Error message if any
	ErrorMessage  string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TunnelStatus) Reset() {
	*x = TunnelStatus{}
	mi := &file_proto_tunnel_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelStatus) ProtoMessage() {}

func (x *TunnelStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelStatus.ProtoReflect.Descriptor instead.
func (*TunnelStatus) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{7}
}

func (x *TunnelStatus) GetState() TunnelState {
	if x != nil {
		return x.State
	}
	return TunnelState_TUNNEL_STATE_UNKNOWN
}

func (x *TunnelStatus) GetActiveConnections() int32 {
	if x != nil {
		return x.ActiveConnections
	}
	return 0
}

func (x *TunnelStatus) GetLastActivity() int64 {
	if x != nil {
		return x.LastActivity
	}
	return 0
}

func (x *TunnelStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Dynamic tunnel configuration
type TunnelConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum concurrent requests
	MaxConcurrent int32 `protobuf:"varint,1,opt,name=max_concurrent,json=maxConcurrent,proto3" json:"max_concurrent,omitempty"`
	// Request timeout
	TimeoutSeconds int32 `protobuf:"varint,2,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// Compression settings
	EnableCompression bool `protobuf:"varint,3,opt,name=enable_compression,json=enableCompression,proto3" json:"enable_compression,omitempty"`
	// Security settings
	Security      *SecurityConfig `protobuf:"bytes,4,opt,name=security,proto3" json:"security,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TunnelConfig) Reset() {
	*x = TunnelConfig{}
	mi := &file_proto_tunnel_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelConfig) ProtoMessage() {}

func (x *TunnelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelConfig.ProtoReflect.Descriptor instead.
func (*TunnelConfig) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{8}
}

func (x *TunnelConfig) GetMaxConcurrent() int32 {
	if x != nil {
		return x.MaxConcurrent
	}
	return 0
}

func (x *TunnelConfig) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *TunnelConfig) GetEnableCompression() bool {
	if x != nil {
		return x.EnableCompression
	}
	return false
}

func (x *TunnelConfig) GetSecurity() *SecurityConfig {
	if x != nil {
		return x.Security
	}
	return nil
}

// Security configuration
type SecurityConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Rate limiting
	RateLimit *RateLimit `protobuf:"bytes,1,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	// Allowed origins (CORS)
	AllowedOrigins []string `protobuf:"bytes,2,rep,name=allowed_origins,json=allowedOrigins,proto3" json:"allowed_origins,omitempty"`
	// Required headers
	RequiredHeaders map[string]string `protobuf:"bytes,3,rep,name=required_headers,json=requiredHeaders,proto3" json:"required_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SecurityConfig) Reset() {
	*x = SecurityConfig{}
	mi := &file_proto_tunnel_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityConfig) ProtoMessage() {}

func (x *SecurityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityConfig.ProtoReflect.Descriptor instead.
func (*SecurityConfig) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{9}
}

func (x *SecurityConfig) GetRateLimit() *RateLimit {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *SecurityConfig) GetAllowedOrigins() []string {
	if x != nil {
		return x.AllowedOrigins
	}
	return nil
}

func (x *SecurityConfig) GetRequiredHeaders() map[string]string {
	if x != nil {
		return x.RequiredHeaders
	}
	return nil
}

// Rate limiting configuration
type RateLimit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requests per minute
	RequestsPerMinute int32 `protobuf:"varint,1,opt,name=requests_per_minute,json=requestsPerMinute,proto3" json:"requests_per_minute,omitempty"`
	// Burst allowance
	BurstSize int32 `protobuf:"varint,2,opt,name=burst_size,json=burstSize,proto3" json:"burst_size,omitempty"`
	// Bandwidth limit (bytes/sec)
	BandwidthLimit int64 `protobuf:"varint,3,opt,name=bandwidth_limit,json=bandwidthLimit,proto3" json:"bandwidth_limit,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RateLimit) Reset() {
	*x = RateLimit{}
	mi := &file_proto_tunnel_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimit) ProtoMessage() {}

func (x *RateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimit.ProtoReflect.Descriptor instead.
func (*RateLimit) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{10}
}

func (x *RateLimit) GetRequestsPerMinute() int32 {
	if x != nil {
		return x.RequestsPerMinute
	}
	return 0
}

func (x *RateLimit) GetBurstSize() int32 {
	if x != nil {
		return x.BurstSize
	}
	return 0
}

func (x *RateLimit) GetBandwidthLimit() int64 {
	if x != nil {
		return x.BandwidthLimit
	}
	return 0
}

// Tunnel performance metrics
type TunnelMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total requests processed
	TotalRequests int64 `protobuf:"varint,1,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	// Current concurrent requests
	ConcurrentRequests int32 `protobuf:"varint,2,opt,name=concurrent_requests,json=concurrentRequests,proto3" json:"concurrent_requests,omitempty"`
	// Average response time
	AvgResponseTimeMs float64 `protobuf:"fixed64,3,opt,name=avg_response_time_ms,json=avgResponseTimeMs,proto3" json:"avg_response_time_ms,omitempty"`
	// Error rate (percentage)
	ErrorRate float64 `protobuf:"fixed64,4,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty"`
	// Bandwidth usage
	BytesTransferred int64 `protobuf:"varint,5,opt,name=bytes_transferred,json=bytesTransferred,proto3" json:"bytes_transferred,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TunnelMetrics) Reset() {
	*x = TunnelMetrics{}
	mi := &file_proto_tunnel_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelMetrics) ProtoMessage() {}

func (x *TunnelMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelMetrics.ProtoReflect.Descriptor instead.
func (*TunnelMetrics) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{11}
}

func (x *TunnelMetrics) GetTotalRequests() int64 {
	if x != nil {
		return x.TotalRequests
	}
	return 0
}

func (x *TunnelMetrics) GetConcurrentRequests() int32 {
	if x != nil {
		return x.ConcurrentRequests
	}
	return 0
}

func (x *TunnelMetrics) GetAvgResponseTimeMs() float64 {
	if x != nil {
		return x.AvgResponseTimeMs
	}
	return 0
}

func (x *TunnelMetrics) GetErrorRate() float64 {
	if x != nil {
		return x.ErrorRate
	}
	return 0
}

func (x *TunnelMetrics) GetBytesTransferred() int64 {
	if x != nil {
		return x.BytesTransferred
	}
	return 0
}

// Error message
type ErrorMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error code
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Error message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Error details
	Details map[string]string `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Whether this is retryable
	Retryable     bool `protobuf:"varint,4,opt,name=retryable,proto3" json:"retryable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorMessage) Reset() {
	*x = ErrorMessage{}
	mi := &file_proto_tunnel_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessage) ProtoMessage() {}

func (x *ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessage.ProtoReflect.Descriptor instead.
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{12}
}

func (x *ErrorMessage) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ErrorMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorMessage) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ErrorMessage) GetRetryable() bool {
	if x != nil {
		return x.Retryable
	}
	return false
}

// Health check messages
type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_proto_tunnel_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{13}
}

func (x *HealthCheckRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        HealthStatus           `protobuf:"varint,1,opt,name=status,proto3,enum=tunnel.HealthStatus" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Details       map[string]string      `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_proto_tunnel_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tunnel_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_proto_tunnel_proto_rawDescGZIP(), []int{14}
}

func (x *HealthCheckResponse) GetStatus() HealthStatus {
	if x != nil {
		return x.Status
	}
	return HealthStatus_HEALTH_STATUS_UNKNOWN
}

func (x *HealthCheckResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HealthCheckResponse) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_proto_tunnel_proto protoreflect.FileDescriptor

const file_proto_tunnel_proto_rawDesc = "" +
	"\n" +
	"\x12proto/tunnel.proto\x12\x06tunnel\"\xb4\x02\n" +
	"\rTunnelMessage\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x128\n" +
	"\fhttp_request\x18\n" +
	" \x01(\v2\x13.tunnel.HTTPRequestH\x00R\vhttpRequest\x12;\n" +
	"\rhttp_response\x18\v \x01(\v2\x14.tunnel.HTTPResponseH\x00R\fhttpResponse\x121\n" +
	"\acontrol\x18\f \x01(\v2\x15.tunnel.TunnelControlH\x00R\acontrol\x12,\n" +
	"\x05error\x18\r \x01(\v2\x14.tunnel.ErrorMessageH\x00R\x05errorB\x0e\n" +
	"\fmessage_type\"\x97\x02\n" +
	"\vHTTPRequest\x12\x16\n" +
	"\x06method\x18\x01 \x01(\tR\x06method\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12:\n" +
	"\aheaders\x18\x03 \x03(\v2 .tunnel.HTTPRequest.HeadersEntryR\aheaders\x12\x12\n" +
	"\x04body\x18\x04 \x01(\fR\x04body\x12\x1b\n" +
	"\tclient_ip\x18\x05 \x01(\tR\bclientIp\x123\n" +
	"\bmetadata\x18\x06 \x01(\v2\x17.tunnel.RequestMetadataR\bmetadata\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x93\x02\n" +
	"\fHTTPResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x1f\n" +
	"\vstatus_text\x18\x02 \x01(\tR\n" +
	"statusText\x12;\n" +
	"\aheaders\x18\x03 \x03(\v2!.tunnel.HTTPResponse.HeadersEntryR\aheaders\x12\x12\n" +
	"\x04body\x18\x04 \x01(\fR\x04body\x124\n" +
	"\bmetadata\x18\x05 \x01(\v2\x18.tunnel.ResponseMetadataR\bmetadata\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb6\x01\n" +
	"\x0fRequestMetadata\x12'\n" +
	"\x04type\x18\x01 \x01(\x0e2\x13.tunnel.RequestTypeR\x04type\x12#\n" +
	"\rexpected_size\x18\x02 \x01(\x03R\fexpectedSize\x12,\n" +
	"\bpriority\x18\x03 \x01(\x0e2\x10.tunnel.PriorityR\bpriority\x12'\n" +
	"\x0ftimeout_seconds\x18\x04 \x01(\x05R\x0etimeoutSeconds\"\x9d\x01\n" +
	"\x10ResponseMetadata\x12,\n" +
	"\x12processing_time_ms\x18\x01 \x01(\x03R\x10processingTimeMs\x12#\n" +
	"\rresponse_size\x18\x02 \x01(\x03R\fresponseSize\x126\n" +
	"\fcache_status\x18\x03 \x01(\x0e2\x13.tunnel.CacheStatusR\vcacheStatus\"\xeb\x01\n" +
	"\rTunnelControl\x127\n" +
	"\thandshake\x18\x01 \x01(\v2\x17.tunnel.TunnelHandshakeH\x00R\thandshake\x12.\n" +
	"\x06status\x18\x02 \x01(\v2\x14.tunnel.TunnelStatusH\x00R\x06status\x12.\n" +
	"\x06config\x18\x03 \x01(\v2\x14.tunnel.TunnelConfigH\x00R\x06config\x121\n" +
	"\ametrics\x18\x04 \x01(\v2\x15.tunnel.TunnelMetricsH\x00R\ametricsB\x0e\n" +
	"\fcontrol_type\"\xab\x01\n" +
	"\x0fTunnelHandshake\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12\x16\n" +
	"\x06domain\x18\x02 \x01(\tR\x06domain\x12\x1f\n" +
	"\vtarget_port\x18\x03 \x01(\x05R\n" +
	"targetPort\x12\"\n" +
	"\fcapabilities\x18\x04 \x03(\tR\fcapabilities\x12%\n" +
	"\x0eclient_version\x18\x05 \x01(\tR\rclientVersion\"\xb2\x01\n" +
	"\fTunnelStatus\x12)\n" +
	"\x05state\x18\x01 \x01(\x0e2\x13.tunnel.TunnelStateR\x05state\x12-\n" +
	"\x12active_connections\x18\x02 \x01(\x05R\x11activeConnections\x12#\n" +
	"\rlast_activity\x18\x03 \x01(\x03R\flastActivity\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\"\xc1\x01\n" +
	"\fTunnelConfig\x12%\n" +
	"\x0emax_concurrent\x18\x01 \x01(\x05R\rmaxConcurrent\x12'\n" +
	"\x0ftimeout_seconds\x18\x02 \x01(\x05R\x0etimeoutSeconds\x12-\n" +
	"\x12enable_compression\x18\x03 \x01(\bR\x11enableCompression\x122\n" +
	"\bsecurity\x18\x04 \x01(\v2\x16.tunnel.SecurityConfigR\bsecurity\"\x87\x02\n" +
	"\x0eSecurityConfig\x120\n" +
	"\n" +
	"rate_limit\x18\x01 \x01(\v2\x11.tunnel.RateLimitR\trateLimit\x12'\n" +
	"\x0fallowed_origins\x18\x02 \x03(\tR\x0eallowedOrigins\x12V\n" +
	"\x10required_headers\x18\x03 \x03(\v2+.tunnel.SecurityConfig.RequiredHeadersEntryR\x0frequiredHeaders\x1aB\n" +
	"\x14RequiredHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x83\x01\n" +
	"\tRateLimit\x12.\n" +
	"\x13requests_per_minute\x18\x01 \x01(\x05R\x11requestsPerMinute\x12\x1d\n" +
	"\n" +
	"burst_size\x18\x02 \x01(\x05R\tburstSize\x12'\n" +
	"\x0fbandwidth_limit\x18\x03 \x01(\x03R\x0ebandwidthLimit\"\xe4\x01\n" +
	"\rTunnelMetrics\x12%\n" +
	"\x0etotal_requests\x18\x01 \x01(\x03R\rtotalRequests\x12/\n" +
	"\x13concurrent_requests\x18\x02 \x01(\x05R\x12concurrentRequests\x12/\n" +
	"\x14avg_response_time_ms\x18\x03 \x01(\x01R\x11avgResponseTimeMs\x12\x1d\n" +
	"\n" +
	"error_rate\x18\x04 \x01(\x01R\terrorRate\x12+\n" +
	"\x11bytes_transferred\x18\x05 \x01(\x03R\x10bytesTransferred\"\xd3\x01\n" +
	"\fErrorMessage\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12;\n" +
	"\adetails\x18\x03 \x03(\v2!.tunnel.ErrorMessage.DetailsEntryR\adetails\x12\x1c\n" +
	"\tretryable\x18\x04 \x01(\bR\tretryable\x1a:\n" +
	"\fDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\".\n" +
	"\x12HealthCheckRequest\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\"\xdd\x01\n" +
	"\x13HealthCheckResponse\x12,\n" +
	"\x06status\x18\x01 \x01(\x0e2\x14.tunnel.HealthStatusR\x06status\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12B\n" +
	"\adetails\x18\x03 \x03(\v2(.tunnel.HealthCheckResponse.DetailsEntryR\adetails\x1a:\n" +
	"\fDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*\x87\x01\n" +
	"\vRequestType\x12\x18\n" +
	"\x14REQUEST_TYPE_UNKNOWN\x10\x00\x12\x14\n" +
	"\x10REQUEST_TYPE_API\x10\x01\x12\x17\n" +
	"\x13REQUEST_TYPE_STATIC\x10\x02\x12\x16\n" +
	"\x12REQUEST_TYPE_MEDIA\x10\x03\x12\x17\n" +
	"\x13REQUEST_TYPE_STREAM\x10\x04*q\n" +
	"\bPriority\x12\x14\n" +
	"\x10PRIORITY_UNKNOWN\x10\x00\x12\x10\n" +
	"\fPRIORITY_LOW\x10\x01\x12\x13\n" +
	"\x0fPRIORITY_NORMAL\x10\x02\x12\x11\n" +
	"\rPRIORITY_HIGH\x10\x03\x12\x15\n" +
	"\x11PRIORITY_CRITICAL\x10\x04*m\n" +
	"\vCacheStatus\x12\x18\n" +
	"\x14CACHE_STATUS_UNKNOWN\x10\x00\x12\x15\n" +
	"\x11CACHE_STATUS_MISS\x10\x01\x12\x14\n" +
	"\x10CACHE_STATUS_HIT\x10\x02\x12\x17\n" +
	"\x13CACHE_STATUS_BYPASS\x10\x03*\x98\x01\n" +
	"\vTunnelState\x12\x18\n" +
	"\x14TUNNEL_STATE_UNKNOWN\x10\x00\x12\x1b\n" +
	"\x17TUNNEL_STATE_CONNECTING\x10\x01\x12\x1a\n" +
	"\x16TUNNEL_STATE_CONNECTED\x10\x02\x12\x1e\n" +
	"\x1aTUNNEL_STATE_DISCONNECTING\x10\x03\x12\x16\n" +
	"\x12TUNNEL_STATE_ERROR\x10\x04*\x86\x01\n" +
	"\fHealthStatus\x12\x19\n" +
	"\x15HEALTH_STATUS_UNKNOWN\x10\x00\x12\x19\n" +
	"\x15HEALTH_STATUS_SERVING\x10\x01\x12\x1d\n" +
	"\x19HEALTH_STATUS_NOT_SERVING\x10\x02\x12!\n" +
	"\x1dHEALTH_STATUS_SERVICE_UNKNOWN\x10\x032\x9c\x01\n" +
	"\rTunnelService\x12C\n" +
	"\x0fEstablishTunnel\x12\x15.tunnel.TunnelMessage\x1a\x15.tunnel.TunnelMessage(\x010\x01\x12F\n" +
	"\vHealthCheck\x12\x1a.tunnel.HealthCheckRequest\x1a\x1b.tunnel.HealthCheckResponseB$Z\"giraffecloud/internal/tunnel/protob\x06proto3"

var (
	file_proto_tunnel_proto_rawDescOnce sync.Once
	file_proto_tunnel_proto_rawDescData []byte
)

func file_proto_tunnel_proto_rawDescGZIP() []byte {
	file_proto_tunnel_proto_rawDescOnce.Do(func() {
		file_proto_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_tunnel_proto_rawDesc), len(file_proto_tunnel_proto_rawDesc)))
	})
	return file_proto_tunnel_proto_rawDescData
}

var file_proto_tunnel_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_proto_tunnel_proto_goTypes = []any{
	(RequestType)(0),            // 0: tunnel.RequestType
	(Priority)(0),               // 1: tunnel.Priority
	(CacheStatus)(0),            // 2: tunnel.CacheStatus
	(TunnelState)(0),            // 3: tunnel.TunnelState
	(HealthStatus)(0),           // 4: tunnel.HealthStatus
	(*TunnelMessage)(nil),       // 5: tunnel.TunnelMessage
	(*HTTPRequest)(nil),         // 6: tunnel.HTTPRequest
	(*HTTPResponse)(nil),        // 7: tunnel.HTTPResponse
	(*RequestMetadata)(nil),     // 8: tunnel.RequestMetadata
	(*ResponseMetadata)(nil),    // 9: tunnel.ResponseMetadata
	(*TunnelControl)(nil),       // 10: tunnel.TunnelControl
	(*TunnelHandshake)(nil),     // 11: tunnel.TunnelHandshake
	(*TunnelStatus)(nil),        // 12: tunnel.TunnelStatus
	(*TunnelConfig)(nil),        // 13: tunnel.TunnelConfig
	(*SecurityConfig)(nil),      // 14: tunnel.SecurityConfig
	(*RateLimit)(nil),           // 15: tunnel.RateLimit
	(*TunnelMetrics)(nil),       // 16: tunnel.TunnelMetrics
	(*ErrorMessage)(nil),        // 17: tunnel.ErrorMessage
	(*HealthCheckRequest)(nil),  // 18: tunnel.HealthCheckRequest
	(*HealthCheckResponse)(nil), // 19: tunnel.HealthCheckResponse
	nil,                         // 20: tunnel.HTTPRequest.HeadersEntry
	nil,                         // 21: tunnel.HTTPResponse.HeadersEntry
	nil,                         // 22: tunnel.SecurityConfig.RequiredHeadersEntry
	nil,                         // 23: tunnel.ErrorMessage.DetailsEntry
	nil,                         // 24: tunnel.HealthCheckResponse.DetailsEntry
}
var file_proto_tunnel_proto_depIdxs = []int32{
	6,  // 0: tunnel.TunnelMessage.http_request:type_name -> tunnel.HTTPRequest
	7,  // 1: tunnel.TunnelMessage.http_response:type_name -> tunnel.HTTPResponse
	10, // 2: tunnel.TunnelMessage.control:type_name -> tunnel.TunnelControl
	17, // 3: tunnel.TunnelMessage.error:type_name -> tunnel.ErrorMessage
	20, // 4: tunnel.HTTPRequest.headers:type_name -> tunnel.HTTPRequest.HeadersEntry
	8,  // 5: tunnel.HTTPRequest.metadata:type_name -> tunnel.RequestMetadata
	21, // 6: tunnel.HTTPResponse.headers:type_name -> tunnel.HTTPResponse.HeadersEntry
	9,  // 7: tunnel.HTTPResponse.metadata:type_name -> tunnel.ResponseMetadata
	0,  // 8: tunnel.RequestMetadata.type:type_name -> tunnel.RequestType
	1,  // 9: tunnel.RequestMetadata.priority:type_name -> tunnel.Priority
	2,  // 10: tunnel.ResponseMetadata.cache_status:type_name -> tunnel.CacheStatus
	11, // 11: tunnel.TunnelControl.handshake:type_name -> tunnel.TunnelHandshake
	12, // 12: tunnel.TunnelControl.status:type_name -> tunnel.TunnelStatus
	13, // 13: tunnel.TunnelControl.config:type_name -> tunnel.TunnelConfig
	16, // 14: tunnel.TunnelControl.metrics:type_name -> tunnel.TunnelMetrics
	3,  // 15: tunnel.TunnelStatus.state:type_name -> tunnel.TunnelState
	14, // 16: tunnel.TunnelConfig.security:type_name -> tunnel.SecurityConfig
	15, // 17: tunnel.SecurityConfig.rate_limit:type_name -> tunnel.RateLimit
	22, // 18: tunnel.SecurityConfig.required_headers:type_name -> tunnel.SecurityConfig.RequiredHeadersEntry
	23, // 19: tunnel.ErrorMessage.details:type_name -> tunnel.ErrorMessage.DetailsEntry
	4,  // 20: tunnel.HealthCheckResponse.status:type_name -> tunnel.HealthStatus
	24, // 21: tunnel.HealthCheckResponse.details:type_name -> tunnel.HealthCheckResponse.DetailsEntry
	5,  // 22: tunnel.TunnelService.EstablishTunnel:input_type -> tunnel.TunnelMessage
	18, // 23: tunnel.TunnelService.HealthCheck:input_type -> tunnel.HealthCheckRequest
	5,  // 24: tunnel.TunnelService.EstablishTunnel:output_type -> tunnel.TunnelMessage
	19, // 25: tunnel.TunnelService.HealthCheck:output_type -> tunnel.HealthCheckResponse
	24, // [24:26] is the sub-list for method output_type
	22, // [22:24] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_proto_tunnel_proto_init() }
func file_proto_tunnel_proto_init() {
	if File_proto_tunnel_proto != nil {
		return
	}
	file_proto_tunnel_proto_msgTypes[0].OneofWrappers = []any{
		(*TunnelMessage_HttpRequest)(nil),
		(*TunnelMessage_HttpResponse)(nil),
		(*TunnelMessage_Control)(nil),
		(*TunnelMessage_Error)(nil),
	}
	file_proto_tunnel_proto_msgTypes[5].OneofWrappers = []any{
		(*TunnelControl_Handshake)(nil),
		(*TunnelControl_Status)(nil),
		(*TunnelControl_Config)(nil),
		(*TunnelControl_Metrics)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_tunnel_proto_rawDesc), len(file_proto_tunnel_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_tunnel_proto_goTypes,
		DependencyIndexes: file_proto_tunnel_proto_depIdxs,
		EnumInfos:         file_proto_tunnel_proto_enumTypes,
		MessageInfos:      file_proto_tunnel_proto_msgTypes,
	}.Build()
	File_proto_tunnel_proto = out.File
	file_proto_tunnel_proto_goTypes = nil
	file_proto_tunnel_proto_depIdxs = nil
}
