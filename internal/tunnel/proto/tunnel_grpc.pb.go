// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: tunnel.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TunnelService_EstablishTunnel_FullMethodName = "/tunnel.TunnelService/EstablishTunnel"
	TunnelService_ControlChannel_FullMethodName  = "/tunnel.TunnelService/ControlChannel"
	TunnelService_StreamLargeFile_FullMethodName = "/tunnel.TunnelService/StreamLargeFile"
	TunnelService_HealthCheck_FullMethodName     = "/tunnel.TunnelService/HealthCheck"
)

// TunnelServiceClient is the client API for TunnelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TunnelService provides high-performance tunneling with unlimited concurrency
type TunnelServiceClient interface {
	// EstablishTunnel creates a bidirectional streaming tunnel for regular HTTP traffic
	EstablishTunnel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TunnelMessage, TunnelMessage], error)
	// ControlChannel provides a dedicated stream for high-priority control messages
	// This prevents cancels and health checks from being blocked by large data transfers
	ControlChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ControlMessage, ControlMessage], error)
	// StreamLargeFile handles large file streaming with chunked transfer for memory efficiency
	StreamLargeFile(ctx context.Context, in *LargeFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LargeFileChunk], error)
	// HealthCheck provides tunnel health monitoring
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type tunnelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelServiceClient(cc grpc.ClientConnInterface) TunnelServiceClient {
	return &tunnelServiceClient{cc}
}

func (c *tunnelServiceClient) EstablishTunnel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TunnelMessage, TunnelMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TunnelService_ServiceDesc.Streams[0], TunnelService_EstablishTunnel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TunnelMessage, TunnelMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelService_EstablishTunnelClient = grpc.BidiStreamingClient[TunnelMessage, TunnelMessage]

func (c *tunnelServiceClient) ControlChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ControlMessage, ControlMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TunnelService_ServiceDesc.Streams[1], TunnelService_ControlChannel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ControlMessage, ControlMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelService_ControlChannelClient = grpc.BidiStreamingClient[ControlMessage, ControlMessage]

func (c *tunnelServiceClient) StreamLargeFile(ctx context.Context, in *LargeFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LargeFileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TunnelService_ServiceDesc.Streams[2], TunnelService_StreamLargeFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LargeFileRequest, LargeFileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelService_StreamLargeFileClient = grpc.ServerStreamingClient[LargeFileChunk]

func (c *tunnelServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, TunnelService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelServiceServer is the server API for TunnelService service.
// All implementations must embed UnimplementedTunnelServiceServer
// for forward compatibility.
//
// TunnelService provides high-performance tunneling with unlimited concurrency
type TunnelServiceServer interface {
	// EstablishTunnel creates a bidirectional streaming tunnel for regular HTTP traffic
	EstablishTunnel(grpc.BidiStreamingServer[TunnelMessage, TunnelMessage]) error
	// ControlChannel provides a dedicated stream for high-priority control messages
	// This prevents cancels and health checks from being blocked by large data transfers
	ControlChannel(grpc.BidiStreamingServer[ControlMessage, ControlMessage]) error
	// StreamLargeFile handles large file streaming with chunked transfer for memory efficiency
	StreamLargeFile(*LargeFileRequest, grpc.ServerStreamingServer[LargeFileChunk]) error
	// HealthCheck provides tunnel health monitoring
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedTunnelServiceServer()
}

// UnimplementedTunnelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTunnelServiceServer struct{}

func (UnimplementedTunnelServiceServer) EstablishTunnel(grpc.BidiStreamingServer[TunnelMessage, TunnelMessage]) error {
	return status.Errorf(codes.Unimplemented, "method EstablishTunnel not implemented")
}
func (UnimplementedTunnelServiceServer) ControlChannel(grpc.BidiStreamingServer[ControlMessage, ControlMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ControlChannel not implemented")
}
func (UnimplementedTunnelServiceServer) StreamLargeFile(*LargeFileRequest, grpc.ServerStreamingServer[LargeFileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLargeFile not implemented")
}
func (UnimplementedTunnelServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedTunnelServiceServer) mustEmbedUnimplementedTunnelServiceServer() {}
func (UnimplementedTunnelServiceServer) testEmbeddedByValue()                       {}

// UnsafeTunnelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelServiceServer will
// result in compilation errors.
type UnsafeTunnelServiceServer interface {
	mustEmbedUnimplementedTunnelServiceServer()
}

func RegisterTunnelServiceServer(s grpc.ServiceRegistrar, srv TunnelServiceServer) {
	// If the following call pancis, it indicates UnimplementedTunnelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TunnelService_ServiceDesc, srv)
}

func _TunnelService_EstablishTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServiceServer).EstablishTunnel(&grpc.GenericServerStream[TunnelMessage, TunnelMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelService_EstablishTunnelServer = grpc.BidiStreamingServer[TunnelMessage, TunnelMessage]

func _TunnelService_ControlChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServiceServer).ControlChannel(&grpc.GenericServerStream[ControlMessage, ControlMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelService_ControlChannelServer = grpc.BidiStreamingServer[ControlMessage, ControlMessage]

func _TunnelService_StreamLargeFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LargeFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TunnelServiceServer).StreamLargeFile(m, &grpc.GenericServerStream[LargeFileRequest, LargeFileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelService_StreamLargeFileServer = grpc.ServerStreamingServer[LargeFileChunk]

func _TunnelService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TunnelService_ServiceDesc is the grpc.ServiceDesc for TunnelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TunnelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel.TunnelService",
	HandlerType: (*TunnelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _TunnelService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EstablishTunnel",
			Handler:       _TunnelService_EstablishTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ControlChannel",
			Handler:       _TunnelService_ControlChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamLargeFile",
			Handler:       _TunnelService_StreamLargeFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tunnel.proto",
}
