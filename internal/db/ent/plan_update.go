// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"giraffecloud/internal/db/ent/plan"
	"giraffecloud/internal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlanUpdate is the builder for updating Plan entities.
type PlanUpdate struct {
	config
	hooks    []Hook
	mutation *PlanMutation
}

// Where appends a list predicates to the PlanUpdate builder.
func (pu *PlanUpdate) Where(ps ...predicate.Plan) *PlanUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PlanUpdate) SetUpdatedAt(t time.Time) *PlanUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetName sets the "name" field.
func (pu *PlanUpdate) SetName(s string) *PlanUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableName(s *string) *PlanUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetMonthlyLimitBytes sets the "monthly_limit_bytes" field.
func (pu *PlanUpdate) SetMonthlyLimitBytes(i int64) *PlanUpdate {
	pu.mutation.ResetMonthlyLimitBytes()
	pu.mutation.SetMonthlyLimitBytes(i)
	return pu
}

// SetNillableMonthlyLimitBytes sets the "monthly_limit_bytes" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableMonthlyLimitBytes(i *int64) *PlanUpdate {
	if i != nil {
		pu.SetMonthlyLimitBytes(*i)
	}
	return pu
}

// AddMonthlyLimitBytes adds i to the "monthly_limit_bytes" field.
func (pu *PlanUpdate) AddMonthlyLimitBytes(i int64) *PlanUpdate {
	pu.mutation.AddMonthlyLimitBytes(i)
	return pu
}

// SetOveragePerGBCents sets the "overage_per_gb_cents" field.
func (pu *PlanUpdate) SetOveragePerGBCents(i int) *PlanUpdate {
	pu.mutation.ResetOveragePerGBCents()
	pu.mutation.SetOveragePerGBCents(i)
	return pu
}

// SetNillableOveragePerGBCents sets the "overage_per_gb_cents" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableOveragePerGBCents(i *int) *PlanUpdate {
	if i != nil {
		pu.SetOveragePerGBCents(*i)
	}
	return pu
}

// AddOveragePerGBCents adds i to the "overage_per_gb_cents" field.
func (pu *PlanUpdate) AddOveragePerGBCents(i int) *PlanUpdate {
	pu.mutation.AddOveragePerGBCents(i)
	return pu
}

// SetActive sets the "active" field.
func (pu *PlanUpdate) SetActive(b bool) *PlanUpdate {
	pu.mutation.SetActive(b)
	return pu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableActive(b *bool) *PlanUpdate {
	if b != nil {
		pu.SetActive(*b)
	}
	return pu
}

// Mutation returns the PlanMutation object of the builder.
func (pu *PlanUpdate) Mutation() *PlanMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlanUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PlanUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := plan.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PlanUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := plan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Plan.name": %w`, err)}
		}
	}
	return nil
}

func (pu *PlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.MonthlyLimitBytes(); ok {
		_spec.SetField(plan.FieldMonthlyLimitBytes, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedMonthlyLimitBytes(); ok {
		_spec.AddField(plan.FieldMonthlyLimitBytes, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.OveragePerGBCents(); ok {
		_spec.SetField(plan.FieldOveragePerGBCents, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedOveragePerGBCents(); ok {
		_spec.AddField(plan.FieldOveragePerGBCents, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Active(); ok {
		_spec.SetField(plan.FieldActive, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlanUpdateOne is the builder for updating a single Plan entity.
type PlanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlanMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PlanUpdateOne) SetUpdatedAt(t time.Time) *PlanUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetName sets the "name" field.
func (puo *PlanUpdateOne) SetName(s string) *PlanUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableName(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetMonthlyLimitBytes sets the "monthly_limit_bytes" field.
func (puo *PlanUpdateOne) SetMonthlyLimitBytes(i int64) *PlanUpdateOne {
	puo.mutation.ResetMonthlyLimitBytes()
	puo.mutation.SetMonthlyLimitBytes(i)
	return puo
}

// SetNillableMonthlyLimitBytes sets the "monthly_limit_bytes" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableMonthlyLimitBytes(i *int64) *PlanUpdateOne {
	if i != nil {
		puo.SetMonthlyLimitBytes(*i)
	}
	return puo
}

// AddMonthlyLimitBytes adds i to the "monthly_limit_bytes" field.
func (puo *PlanUpdateOne) AddMonthlyLimitBytes(i int64) *PlanUpdateOne {
	puo.mutation.AddMonthlyLimitBytes(i)
	return puo
}

// SetOveragePerGBCents sets the "overage_per_gb_cents" field.
func (puo *PlanUpdateOne) SetOveragePerGBCents(i int) *PlanUpdateOne {
	puo.mutation.ResetOveragePerGBCents()
	puo.mutation.SetOveragePerGBCents(i)
	return puo
}

// SetNillableOveragePerGBCents sets the "overage_per_gb_cents" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableOveragePerGBCents(i *int) *PlanUpdateOne {
	if i != nil {
		puo.SetOveragePerGBCents(*i)
	}
	return puo
}

// AddOveragePerGBCents adds i to the "overage_per_gb_cents" field.
func (puo *PlanUpdateOne) AddOveragePerGBCents(i int) *PlanUpdateOne {
	puo.mutation.AddOveragePerGBCents(i)
	return puo
}

// SetActive sets the "active" field.
func (puo *PlanUpdateOne) SetActive(b bool) *PlanUpdateOne {
	puo.mutation.SetActive(b)
	return puo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableActive(b *bool) *PlanUpdateOne {
	if b != nil {
		puo.SetActive(*b)
	}
	return puo
}

// Mutation returns the PlanMutation object of the builder.
func (puo *PlanUpdateOne) Mutation() *PlanMutation {
	return puo.mutation
}

// Where appends a list predicates to the PlanUpdate builder.
func (puo *PlanUpdateOne) Where(ps ...predicate.Plan) *PlanUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlanUpdateOne) Select(field string, fields ...string) *PlanUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Plan entity.
func (puo *PlanUpdateOne) Save(ctx context.Context) (*Plan, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanUpdateOne) SaveX(ctx context.Context) *Plan {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlanUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PlanUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := plan.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PlanUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := plan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Plan.name": %w`, err)}
		}
	}
	return nil
}

func (puo *PlanUpdateOne) sqlSave(ctx context.Context) (_node *Plan, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Plan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plan.FieldID)
		for _, f := range fields {
			if !plan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.MonthlyLimitBytes(); ok {
		_spec.SetField(plan.FieldMonthlyLimitBytes, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedMonthlyLimitBytes(); ok {
		_spec.AddField(plan.FieldMonthlyLimitBytes, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.OveragePerGBCents(); ok {
		_spec.SetField(plan.FieldOveragePerGBCents, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedOveragePerGBCents(); ok {
		_spec.AddField(plan.FieldOveragePerGBCents, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Active(); ok {
		_spec.SetField(plan.FieldActive, field.TypeBool, value)
	}
	_node = &Plan{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
