// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"giraffecloud/internal/db/ent/tunnel"
	"giraffecloud/internal/db/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Tunnel is the model entity for the Tunnel schema.
type Tunnel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// ClientIP holds the value of the "client_ip" field.
	ClientIP string `json:"client_ip,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// TargetPort holds the value of the "target_port" field.
	TargetPort int `json:"target_port,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint32 `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TunnelQuery when eager-loading is set.
	Edges        TunnelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TunnelEdges holds the relations/edges for other nodes in the graph.
type TunnelEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TunnelEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tunnel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tunnel.FieldIsActive:
			values[i] = new(sql.NullBool)
		case tunnel.FieldID, tunnel.FieldTargetPort, tunnel.FieldUserID:
			values[i] = new(sql.NullInt64)
		case tunnel.FieldDomain, tunnel.FieldToken, tunnel.FieldClientIP:
			values[i] = new(sql.NullString)
		case tunnel.FieldCreatedAt, tunnel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tunnel fields.
func (t *Tunnel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tunnel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tunnel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tunnel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case tunnel.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				t.Domain = value.String
			}
		case tunnel.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				t.Token = value.String
			}
		case tunnel.FieldClientIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_ip", values[i])
			} else if value.Valid {
				t.ClientIP = value.String
			}
		case tunnel.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				t.IsActive = value.Bool
			}
		case tunnel.FieldTargetPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_port", values[i])
			} else if value.Valid {
				t.TargetPort = int(value.Int64)
			}
		case tunnel.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				t.UserID = uint32(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tunnel.
// This includes values selected through modifiers, order, etc.
func (t *Tunnel) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Tunnel entity.
func (t *Tunnel) QueryOwner() *UserQuery {
	return NewTunnelClient(t.config).QueryOwner(t)
}

// Update returns a builder for updating this Tunnel.
// Note that you need to call Tunnel.Unwrap() before calling this method if this Tunnel
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tunnel) Update() *TunnelUpdateOne {
	return NewTunnelClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tunnel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tunnel) Unwrap() *Tunnel {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tunnel is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tunnel) String() string {
	var builder strings.Builder
	builder.WriteString("Tunnel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(t.Domain)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(t.Token)
	builder.WriteString(", ")
	builder.WriteString("client_ip=")
	builder.WriteString(t.ClientIP)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", t.IsActive))
	builder.WriteString(", ")
	builder.WriteString("target_port=")
	builder.WriteString(fmt.Sprintf("%v", t.TargetPort))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", t.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Tunnels is a parsable slice of Tunnel.
type Tunnels []*Tunnel
