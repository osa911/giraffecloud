// Code generated by ent, DO NOT EDIT.

package tunnel

import (
	"giraffecloud/internal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldUpdatedAt, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldDomain, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldToken, v))
}

// ClientIP applies equality check predicate on the "client_ip" field. It's identical to ClientIPEQ.
func ClientIP(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldClientIP, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldIsActive, v))
}

// TargetPort applies equality check predicate on the "target_port" field. It's identical to TargetPortEQ.
func TargetPort(v int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldTargetPort, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint32) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldUserID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldLTE(FieldUpdatedAt, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldContainsFold(FieldDomain, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldContainsFold(FieldToken, v))
}

// ClientIPEQ applies the EQ predicate on the "client_ip" field.
func ClientIPEQ(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldClientIP, v))
}

// ClientIPNEQ applies the NEQ predicate on the "client_ip" field.
func ClientIPNEQ(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNEQ(FieldClientIP, v))
}

// ClientIPIn applies the In predicate on the "client_ip" field.
func ClientIPIn(vs ...string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldIn(FieldClientIP, vs...))
}

// ClientIPNotIn applies the NotIn predicate on the "client_ip" field.
func ClientIPNotIn(vs ...string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNotIn(FieldClientIP, vs...))
}

// ClientIPGT applies the GT predicate on the "client_ip" field.
func ClientIPGT(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldGT(FieldClientIP, v))
}

// ClientIPGTE applies the GTE predicate on the "client_ip" field.
func ClientIPGTE(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldGTE(FieldClientIP, v))
}

// ClientIPLT applies the LT predicate on the "client_ip" field.
func ClientIPLT(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldLT(FieldClientIP, v))
}

// ClientIPLTE applies the LTE predicate on the "client_ip" field.
func ClientIPLTE(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldLTE(FieldClientIP, v))
}

// ClientIPContains applies the Contains predicate on the "client_ip" field.
func ClientIPContains(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldContains(FieldClientIP, v))
}

// ClientIPHasPrefix applies the HasPrefix predicate on the "client_ip" field.
func ClientIPHasPrefix(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldHasPrefix(FieldClientIP, v))
}

// ClientIPHasSuffix applies the HasSuffix predicate on the "client_ip" field.
func ClientIPHasSuffix(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldHasSuffix(FieldClientIP, v))
}

// ClientIPIsNil applies the IsNil predicate on the "client_ip" field.
func ClientIPIsNil() predicate.Tunnel {
	return predicate.Tunnel(sql.FieldIsNull(FieldClientIP))
}

// ClientIPNotNil applies the NotNil predicate on the "client_ip" field.
func ClientIPNotNil() predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNotNull(FieldClientIP))
}

// ClientIPEqualFold applies the EqualFold predicate on the "client_ip" field.
func ClientIPEqualFold(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEqualFold(FieldClientIP, v))
}

// ClientIPContainsFold applies the ContainsFold predicate on the "client_ip" field.
func ClientIPContainsFold(v string) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldContainsFold(FieldClientIP, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNEQ(FieldIsActive, v))
}

// TargetPortEQ applies the EQ predicate on the "target_port" field.
func TargetPortEQ(v int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldTargetPort, v))
}

// TargetPortNEQ applies the NEQ predicate on the "target_port" field.
func TargetPortNEQ(v int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNEQ(FieldTargetPort, v))
}

// TargetPortIn applies the In predicate on the "target_port" field.
func TargetPortIn(vs ...int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldIn(FieldTargetPort, vs...))
}

// TargetPortNotIn applies the NotIn predicate on the "target_port" field.
func TargetPortNotIn(vs ...int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNotIn(FieldTargetPort, vs...))
}

// TargetPortGT applies the GT predicate on the "target_port" field.
func TargetPortGT(v int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldGT(FieldTargetPort, v))
}

// TargetPortGTE applies the GTE predicate on the "target_port" field.
func TargetPortGTE(v int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldGTE(FieldTargetPort, v))
}

// TargetPortLT applies the LT predicate on the "target_port" field.
func TargetPortLT(v int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldLT(FieldTargetPort, v))
}

// TargetPortLTE applies the LTE predicate on the "target_port" field.
func TargetPortLTE(v int) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldLTE(FieldTargetPort, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint32) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint32) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint32) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint32) predicate.Tunnel {
	return predicate.Tunnel(sql.FieldNotIn(FieldUserID, vs...))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Tunnel {
	return predicate.Tunnel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Tunnel {
	return predicate.Tunnel(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tunnel) predicate.Tunnel {
	return predicate.Tunnel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tunnel) predicate.Tunnel {
	return predicate.Tunnel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tunnel) predicate.Tunnel {
	return predicate.Tunnel(sql.NotPredicates(p))
}
