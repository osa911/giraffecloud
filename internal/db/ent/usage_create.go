// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"giraffecloud/internal/db/ent/usage"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UsageCreate is the builder for creating a Usage entity.
type UsageCreate struct {
	config
	mutation *UsageMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (uc *UsageCreate) SetCreatedAt(t time.Time) *UsageCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UsageCreate) SetNillableCreatedAt(t *time.Time) *UsageCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UsageCreate) SetUpdatedAt(t time.Time) *UsageCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UsageCreate) SetNillableUpdatedAt(t *time.Time) *UsageCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetPeriodStart sets the "period_start" field.
func (uc *UsageCreate) SetPeriodStart(t time.Time) *UsageCreate {
	uc.mutation.SetPeriodStart(t)
	return uc
}

// SetUserID sets the "user_id" field.
func (uc *UsageCreate) SetUserID(u uint32) *UsageCreate {
	uc.mutation.SetUserID(u)
	return uc
}

// SetTunnelID sets the "tunnel_id" field.
func (uc *UsageCreate) SetTunnelID(u uint32) *UsageCreate {
	uc.mutation.SetTunnelID(u)
	return uc
}

// SetNillableTunnelID sets the "tunnel_id" field if the given value is not nil.
func (uc *UsageCreate) SetNillableTunnelID(u *uint32) *UsageCreate {
	if u != nil {
		uc.SetTunnelID(*u)
	}
	return uc
}

// SetDomain sets the "domain" field.
func (uc *UsageCreate) SetDomain(s string) *UsageCreate {
	uc.mutation.SetDomain(s)
	return uc
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (uc *UsageCreate) SetNillableDomain(s *string) *UsageCreate {
	if s != nil {
		uc.SetDomain(*s)
	}
	return uc
}

// SetBytesIn sets the "bytes_in" field.
func (uc *UsageCreate) SetBytesIn(i int64) *UsageCreate {
	uc.mutation.SetBytesIn(i)
	return uc
}

// SetNillableBytesIn sets the "bytes_in" field if the given value is not nil.
func (uc *UsageCreate) SetNillableBytesIn(i *int64) *UsageCreate {
	if i != nil {
		uc.SetBytesIn(*i)
	}
	return uc
}

// SetBytesOut sets the "bytes_out" field.
func (uc *UsageCreate) SetBytesOut(i int64) *UsageCreate {
	uc.mutation.SetBytesOut(i)
	return uc
}

// SetNillableBytesOut sets the "bytes_out" field if the given value is not nil.
func (uc *UsageCreate) SetNillableBytesOut(i *int64) *UsageCreate {
	if i != nil {
		uc.SetBytesOut(*i)
	}
	return uc
}

// SetRequests sets the "requests" field.
func (uc *UsageCreate) SetRequests(i int64) *UsageCreate {
	uc.mutation.SetRequests(i)
	return uc
}

// SetNillableRequests sets the "requests" field if the given value is not nil.
func (uc *UsageCreate) SetNillableRequests(i *int64) *UsageCreate {
	if i != nil {
		uc.SetRequests(*i)
	}
	return uc
}

// Mutation returns the UsageMutation object of the builder.
func (uc *UsageCreate) Mutation() *UsageMutation {
	return uc.mutation
}

// Save creates the Usage in the database.
func (uc *UsageCreate) Save(ctx context.Context) (*Usage, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UsageCreate) SaveX(ctx context.Context) *Usage {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UsageCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UsageCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UsageCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := usage.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := usage.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.Domain(); !ok {
		v := usage.DefaultDomain
		uc.mutation.SetDomain(v)
	}
	if _, ok := uc.mutation.BytesIn(); !ok {
		v := usage.DefaultBytesIn
		uc.mutation.SetBytesIn(v)
	}
	if _, ok := uc.mutation.BytesOut(); !ok {
		v := usage.DefaultBytesOut
		uc.mutation.SetBytesOut(v)
	}
	if _, ok := uc.mutation.Requests(); !ok {
		v := usage.DefaultRequests
		uc.mutation.SetRequests(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UsageCreate) check() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Usage.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Usage.updated_at"`)}
	}
	if _, ok := uc.mutation.PeriodStart(); !ok {
		return &ValidationError{Name: "period_start", err: errors.New(`ent: missing required field "Usage.period_start"`)}
	}
	if _, ok := uc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Usage.user_id"`)}
	}
	if _, ok := uc.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New(`ent: missing required field "Usage.domain"`)}
	}
	if _, ok := uc.mutation.BytesIn(); !ok {
		return &ValidationError{Name: "bytes_in", err: errors.New(`ent: missing required field "Usage.bytes_in"`)}
	}
	if _, ok := uc.mutation.BytesOut(); !ok {
		return &ValidationError{Name: "bytes_out", err: errors.New(`ent: missing required field "Usage.bytes_out"`)}
	}
	if _, ok := uc.mutation.Requests(); !ok {
		return &ValidationError{Name: "requests", err: errors.New(`ent: missing required field "Usage.requests"`)}
	}
	return nil
}

func (uc *UsageCreate) sqlSave(ctx context.Context) (*Usage, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UsageCreate) createSpec() (*Usage, *sqlgraph.CreateSpec) {
	var (
		_node = &Usage{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(usage.Table, sqlgraph.NewFieldSpec(usage.FieldID, field.TypeInt))
	)
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(usage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(usage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.PeriodStart(); ok {
		_spec.SetField(usage.FieldPeriodStart, field.TypeTime, value)
		_node.PeriodStart = value
	}
	if value, ok := uc.mutation.UserID(); ok {
		_spec.SetField(usage.FieldUserID, field.TypeUint32, value)
		_node.UserID = value
	}
	if value, ok := uc.mutation.TunnelID(); ok {
		_spec.SetField(usage.FieldTunnelID, field.TypeUint32, value)
		_node.TunnelID = value
	}
	if value, ok := uc.mutation.Domain(); ok {
		_spec.SetField(usage.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if value, ok := uc.mutation.BytesIn(); ok {
		_spec.SetField(usage.FieldBytesIn, field.TypeInt64, value)
		_node.BytesIn = value
	}
	if value, ok := uc.mutation.BytesOut(); ok {
		_spec.SetField(usage.FieldBytesOut, field.TypeInt64, value)
		_node.BytesOut = value
	}
	if value, ok := uc.mutation.Requests(); ok {
		_spec.SetField(usage.FieldRequests, field.TypeInt64, value)
		_node.Requests = value
	}
	return _node, _spec
}

// UsageCreateBulk is the builder for creating many Usage entities in bulk.
type UsageCreateBulk struct {
	config
	err      error
	builders []*UsageCreate
}

// Save creates the Usage entities in the database.
func (ucb *UsageCreateBulk) Save(ctx context.Context) ([]*Usage, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Usage, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UsageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UsageCreateBulk) SaveX(ctx context.Context) []*Usage {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UsageCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UsageCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
