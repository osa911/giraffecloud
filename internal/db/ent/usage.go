// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"giraffecloud/internal/db/ent/usage"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Usage is the model entity for the Usage schema.
type Usage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// PeriodStart holds the value of the "period_start" field.
	PeriodStart time.Time `json:"period_start,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint32 `json:"user_id,omitempty"`
	// TunnelID holds the value of the "tunnel_id" field.
	TunnelID uint32 `json:"tunnel_id,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// BytesIn holds the value of the "bytes_in" field.
	BytesIn int64 `json:"bytes_in,omitempty"`
	// BytesOut holds the value of the "bytes_out" field.
	BytesOut int64 `json:"bytes_out,omitempty"`
	// Requests holds the value of the "requests" field.
	Requests     int64 `json:"requests,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Usage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usage.FieldID, usage.FieldUserID, usage.FieldTunnelID, usage.FieldBytesIn, usage.FieldBytesOut, usage.FieldRequests:
			values[i] = new(sql.NullInt64)
		case usage.FieldDomain:
			values[i] = new(sql.NullString)
		case usage.FieldCreatedAt, usage.FieldUpdatedAt, usage.FieldPeriodStart:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Usage fields.
func (u *Usage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case usage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case usage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case usage.FieldPeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_start", values[i])
			} else if value.Valid {
				u.PeriodStart = value.Time
			}
		case usage.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				u.UserID = uint32(value.Int64)
			}
		case usage.FieldTunnelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tunnel_id", values[i])
			} else if value.Valid {
				u.TunnelID = uint32(value.Int64)
			}
		case usage.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				u.Domain = value.String
			}
		case usage.FieldBytesIn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bytes_in", values[i])
			} else if value.Valid {
				u.BytesIn = value.Int64
			}
		case usage.FieldBytesOut:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bytes_out", values[i])
			} else if value.Valid {
				u.BytesOut = value.Int64
			}
		case usage.FieldRequests:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field requests", values[i])
			} else if value.Valid {
				u.Requests = value.Int64
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Usage.
// This includes values selected through modifiers, order, etc.
func (u *Usage) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// Update returns a builder for updating this Usage.
// Note that you need to call Usage.Unwrap() before calling this method if this Usage
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Usage) Update() *UsageUpdateOne {
	return NewUsageClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the Usage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *Usage) Unwrap() *Usage {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Usage is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Usage) String() string {
	var builder strings.Builder
	builder.WriteString("Usage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("period_start=")
	builder.WriteString(u.PeriodStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", u.UserID))
	builder.WriteString(", ")
	builder.WriteString("tunnel_id=")
	builder.WriteString(fmt.Sprintf("%v", u.TunnelID))
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(u.Domain)
	builder.WriteString(", ")
	builder.WriteString("bytes_in=")
	builder.WriteString(fmt.Sprintf("%v", u.BytesIn))
	builder.WriteString(", ")
	builder.WriteString("bytes_out=")
	builder.WriteString(fmt.Sprintf("%v", u.BytesOut))
	builder.WriteString(", ")
	builder.WriteString("requests=")
	builder.WriteString(fmt.Sprintf("%v", u.Requests))
	builder.WriteByte(')')
	return builder.String()
}

// Usages is a parsable slice of Usage.
type Usages []*Usage
