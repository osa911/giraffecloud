// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"giraffecloud/internal/db/ent/tunnel"
	"giraffecloud/internal/db/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TunnelCreate is the builder for creating a Tunnel entity.
type TunnelCreate struct {
	config
	mutation *TunnelMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *TunnelCreate) SetCreatedAt(t time.Time) *TunnelCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TunnelCreate) SetNillableCreatedAt(t *time.Time) *TunnelCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TunnelCreate) SetUpdatedAt(t time.Time) *TunnelCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TunnelCreate) SetNillableUpdatedAt(t *time.Time) *TunnelCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetDomain sets the "domain" field.
func (tc *TunnelCreate) SetDomain(s string) *TunnelCreate {
	tc.mutation.SetDomain(s)
	return tc
}

// SetToken sets the "token" field.
func (tc *TunnelCreate) SetToken(s string) *TunnelCreate {
	tc.mutation.SetToken(s)
	return tc
}

// SetClientIP sets the "client_ip" field.
func (tc *TunnelCreate) SetClientIP(s string) *TunnelCreate {
	tc.mutation.SetClientIP(s)
	return tc
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (tc *TunnelCreate) SetNillableClientIP(s *string) *TunnelCreate {
	if s != nil {
		tc.SetClientIP(*s)
	}
	return tc
}

// SetIsActive sets the "is_active" field.
func (tc *TunnelCreate) SetIsActive(b bool) *TunnelCreate {
	tc.mutation.SetIsActive(b)
	return tc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tc *TunnelCreate) SetNillableIsActive(b *bool) *TunnelCreate {
	if b != nil {
		tc.SetIsActive(*b)
	}
	return tc
}

// SetTargetPort sets the "target_port" field.
func (tc *TunnelCreate) SetTargetPort(i int) *TunnelCreate {
	tc.mutation.SetTargetPort(i)
	return tc
}

// SetUserID sets the "user_id" field.
func (tc *TunnelCreate) SetUserID(u uint32) *TunnelCreate {
	tc.mutation.SetUserID(u)
	return tc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tc *TunnelCreate) SetOwnerID(id uint32) *TunnelCreate {
	tc.mutation.SetOwnerID(id)
	return tc
}

// SetOwner sets the "owner" edge to the User entity.
func (tc *TunnelCreate) SetOwner(u *User) *TunnelCreate {
	return tc.SetOwnerID(u.ID)
}

// Mutation returns the TunnelMutation object of the builder.
func (tc *TunnelCreate) Mutation() *TunnelMutation {
	return tc.mutation
}

// Save creates the Tunnel in the database.
func (tc *TunnelCreate) Save(ctx context.Context) (*Tunnel, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TunnelCreate) SaveX(ctx context.Context) *Tunnel {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TunnelCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TunnelCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TunnelCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tunnel.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := tunnel.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.IsActive(); !ok {
		v := tunnel.DefaultIsActive
		tc.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TunnelCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Tunnel.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Tunnel.updated_at"`)}
	}
	if _, ok := tc.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New(`ent: missing required field "Tunnel.domain"`)}
	}
	if v, ok := tc.mutation.Domain(); ok {
		if err := tunnel.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Tunnel.domain": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "Tunnel.token"`)}
	}
	if v, ok := tc.mutation.Token(); ok {
		if err := tunnel.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Tunnel.token": %w`, err)}
		}
	}
	if _, ok := tc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Tunnel.is_active"`)}
	}
	if _, ok := tc.mutation.TargetPort(); !ok {
		return &ValidationError{Name: "target_port", err: errors.New(`ent: missing required field "Tunnel.target_port"`)}
	}
	if v, ok := tc.mutation.TargetPort(); ok {
		if err := tunnel.TargetPortValidator(v); err != nil {
			return &ValidationError{Name: "target_port", err: fmt.Errorf(`ent: validator failed for field "Tunnel.target_port": %w`, err)}
		}
	}
	if _, ok := tc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Tunnel.user_id"`)}
	}
	if len(tc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Tunnel.owner"`)}
	}
	return nil
}

func (tc *TunnelCreate) sqlSave(ctx context.Context) (*Tunnel, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TunnelCreate) createSpec() (*Tunnel, *sqlgraph.CreateSpec) {
	var (
		_node = &Tunnel{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tunnel.Table, sqlgraph.NewFieldSpec(tunnel.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tunnel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(tunnel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.Domain(); ok {
		_spec.SetField(tunnel.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if value, ok := tc.mutation.Token(); ok {
		_spec.SetField(tunnel.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := tc.mutation.ClientIP(); ok {
		_spec.SetField(tunnel.FieldClientIP, field.TypeString, value)
		_node.ClientIP = value
	}
	if value, ok := tc.mutation.IsActive(); ok {
		_spec.SetField(tunnel.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := tc.mutation.TargetPort(); ok {
		_spec.SetField(tunnel.FieldTargetPort, field.TypeInt, value)
		_node.TargetPort = value
	}
	if nodes := tc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tunnel.OwnerTable,
			Columns: []string{tunnel.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TunnelCreateBulk is the builder for creating many Tunnel entities in bulk.
type TunnelCreateBulk struct {
	config
	err      error
	builders []*TunnelCreate
}

// Save creates the Tunnel entities in the database.
func (tcb *TunnelCreateBulk) Save(ctx context.Context) ([]*Tunnel, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tunnel, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TunnelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TunnelCreateBulk) SaveX(ctx context.Context) []*Tunnel {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TunnelCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TunnelCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
