// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"giraffecloud/internal/db/ent/predicate"
	"giraffecloud/internal/db/ent/tunnel"
	"giraffecloud/internal/db/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TunnelUpdate is the builder for updating Tunnel entities.
type TunnelUpdate struct {
	config
	hooks    []Hook
	mutation *TunnelMutation
}

// Where appends a list predicates to the TunnelUpdate builder.
func (tu *TunnelUpdate) Where(ps ...predicate.Tunnel) *TunnelUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TunnelUpdate) SetUpdatedAt(t time.Time) *TunnelUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetDomain sets the "domain" field.
func (tu *TunnelUpdate) SetDomain(s string) *TunnelUpdate {
	tu.mutation.SetDomain(s)
	return tu
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (tu *TunnelUpdate) SetNillableDomain(s *string) *TunnelUpdate {
	if s != nil {
		tu.SetDomain(*s)
	}
	return tu
}

// SetToken sets the "token" field.
func (tu *TunnelUpdate) SetToken(s string) *TunnelUpdate {
	tu.mutation.SetToken(s)
	return tu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (tu *TunnelUpdate) SetNillableToken(s *string) *TunnelUpdate {
	if s != nil {
		tu.SetToken(*s)
	}
	return tu
}

// SetClientIP sets the "client_ip" field.
func (tu *TunnelUpdate) SetClientIP(s string) *TunnelUpdate {
	tu.mutation.SetClientIP(s)
	return tu
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (tu *TunnelUpdate) SetNillableClientIP(s *string) *TunnelUpdate {
	if s != nil {
		tu.SetClientIP(*s)
	}
	return tu
}

// ClearClientIP clears the value of the "client_ip" field.
func (tu *TunnelUpdate) ClearClientIP() *TunnelUpdate {
	tu.mutation.ClearClientIP()
	return tu
}

// SetIsActive sets the "is_active" field.
func (tu *TunnelUpdate) SetIsActive(b bool) *TunnelUpdate {
	tu.mutation.SetIsActive(b)
	return tu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tu *TunnelUpdate) SetNillableIsActive(b *bool) *TunnelUpdate {
	if b != nil {
		tu.SetIsActive(*b)
	}
	return tu
}

// SetTargetPort sets the "target_port" field.
func (tu *TunnelUpdate) SetTargetPort(i int) *TunnelUpdate {
	tu.mutation.ResetTargetPort()
	tu.mutation.SetTargetPort(i)
	return tu
}

// SetNillableTargetPort sets the "target_port" field if the given value is not nil.
func (tu *TunnelUpdate) SetNillableTargetPort(i *int) *TunnelUpdate {
	if i != nil {
		tu.SetTargetPort(*i)
	}
	return tu
}

// AddTargetPort adds i to the "target_port" field.
func (tu *TunnelUpdate) AddTargetPort(i int) *TunnelUpdate {
	tu.mutation.AddTargetPort(i)
	return tu
}

// SetUserID sets the "user_id" field.
func (tu *TunnelUpdate) SetUserID(u uint32) *TunnelUpdate {
	tu.mutation.SetUserID(u)
	return tu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tu *TunnelUpdate) SetNillableUserID(u *uint32) *TunnelUpdate {
	if u != nil {
		tu.SetUserID(*u)
	}
	return tu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tu *TunnelUpdate) SetOwnerID(id uint32) *TunnelUpdate {
	tu.mutation.SetOwnerID(id)
	return tu
}

// SetOwner sets the "owner" edge to the User entity.
func (tu *TunnelUpdate) SetOwner(u *User) *TunnelUpdate {
	return tu.SetOwnerID(u.ID)
}

// Mutation returns the TunnelMutation object of the builder.
func (tu *TunnelUpdate) Mutation() *TunnelMutation {
	return tu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (tu *TunnelUpdate) ClearOwner() *TunnelUpdate {
	tu.mutation.ClearOwner()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TunnelUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TunnelUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TunnelUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TunnelUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TunnelUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := tunnel.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TunnelUpdate) check() error {
	if v, ok := tu.mutation.Domain(); ok {
		if err := tunnel.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Tunnel.domain": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Token(); ok {
		if err := tunnel.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Tunnel.token": %w`, err)}
		}
	}
	if v, ok := tu.mutation.TargetPort(); ok {
		if err := tunnel.TargetPortValidator(v); err != nil {
			return &ValidationError{Name: "target_port", err: fmt.Errorf(`ent: validator failed for field "Tunnel.target_port": %w`, err)}
		}
	}
	if tu.mutation.OwnerCleared() && len(tu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tunnel.owner"`)
	}
	return nil
}

func (tu *TunnelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tunnel.Table, tunnel.Columns, sqlgraph.NewFieldSpec(tunnel.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tunnel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Domain(); ok {
		_spec.SetField(tunnel.FieldDomain, field.TypeString, value)
	}
	if value, ok := tu.mutation.Token(); ok {
		_spec.SetField(tunnel.FieldToken, field.TypeString, value)
	}
	if value, ok := tu.mutation.ClientIP(); ok {
		_spec.SetField(tunnel.FieldClientIP, field.TypeString, value)
	}
	if tu.mutation.ClientIPCleared() {
		_spec.ClearField(tunnel.FieldClientIP, field.TypeString)
	}
	if value, ok := tu.mutation.IsActive(); ok {
		_spec.SetField(tunnel.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tu.mutation.TargetPort(); ok {
		_spec.SetField(tunnel.FieldTargetPort, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedTargetPort(); ok {
		_spec.AddField(tunnel.FieldTargetPort, field.TypeInt, value)
	}
	if tu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tunnel.OwnerTable,
			Columns: []string{tunnel.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tunnel.OwnerTable,
			Columns: []string{tunnel.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tunnel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TunnelUpdateOne is the builder for updating a single Tunnel entity.
type TunnelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TunnelMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TunnelUpdateOne) SetUpdatedAt(t time.Time) *TunnelUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetDomain sets the "domain" field.
func (tuo *TunnelUpdateOne) SetDomain(s string) *TunnelUpdateOne {
	tuo.mutation.SetDomain(s)
	return tuo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (tuo *TunnelUpdateOne) SetNillableDomain(s *string) *TunnelUpdateOne {
	if s != nil {
		tuo.SetDomain(*s)
	}
	return tuo
}

// SetToken sets the "token" field.
func (tuo *TunnelUpdateOne) SetToken(s string) *TunnelUpdateOne {
	tuo.mutation.SetToken(s)
	return tuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (tuo *TunnelUpdateOne) SetNillableToken(s *string) *TunnelUpdateOne {
	if s != nil {
		tuo.SetToken(*s)
	}
	return tuo
}

// SetClientIP sets the "client_ip" field.
func (tuo *TunnelUpdateOne) SetClientIP(s string) *TunnelUpdateOne {
	tuo.mutation.SetClientIP(s)
	return tuo
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (tuo *TunnelUpdateOne) SetNillableClientIP(s *string) *TunnelUpdateOne {
	if s != nil {
		tuo.SetClientIP(*s)
	}
	return tuo
}

// ClearClientIP clears the value of the "client_ip" field.
func (tuo *TunnelUpdateOne) ClearClientIP() *TunnelUpdateOne {
	tuo.mutation.ClearClientIP()
	return tuo
}

// SetIsActive sets the "is_active" field.
func (tuo *TunnelUpdateOne) SetIsActive(b bool) *TunnelUpdateOne {
	tuo.mutation.SetIsActive(b)
	return tuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tuo *TunnelUpdateOne) SetNillableIsActive(b *bool) *TunnelUpdateOne {
	if b != nil {
		tuo.SetIsActive(*b)
	}
	return tuo
}

// SetTargetPort sets the "target_port" field.
func (tuo *TunnelUpdateOne) SetTargetPort(i int) *TunnelUpdateOne {
	tuo.mutation.ResetTargetPort()
	tuo.mutation.SetTargetPort(i)
	return tuo
}

// SetNillableTargetPort sets the "target_port" field if the given value is not nil.
func (tuo *TunnelUpdateOne) SetNillableTargetPort(i *int) *TunnelUpdateOne {
	if i != nil {
		tuo.SetTargetPort(*i)
	}
	return tuo
}

// AddTargetPort adds i to the "target_port" field.
func (tuo *TunnelUpdateOne) AddTargetPort(i int) *TunnelUpdateOne {
	tuo.mutation.AddTargetPort(i)
	return tuo
}

// SetUserID sets the "user_id" field.
func (tuo *TunnelUpdateOne) SetUserID(u uint32) *TunnelUpdateOne {
	tuo.mutation.SetUserID(u)
	return tuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuo *TunnelUpdateOne) SetNillableUserID(u *uint32) *TunnelUpdateOne {
	if u != nil {
		tuo.SetUserID(*u)
	}
	return tuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tuo *TunnelUpdateOne) SetOwnerID(id uint32) *TunnelUpdateOne {
	tuo.mutation.SetOwnerID(id)
	return tuo
}

// SetOwner sets the "owner" edge to the User entity.
func (tuo *TunnelUpdateOne) SetOwner(u *User) *TunnelUpdateOne {
	return tuo.SetOwnerID(u.ID)
}

// Mutation returns the TunnelMutation object of the builder.
func (tuo *TunnelUpdateOne) Mutation() *TunnelMutation {
	return tuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (tuo *TunnelUpdateOne) ClearOwner() *TunnelUpdateOne {
	tuo.mutation.ClearOwner()
	return tuo
}

// Where appends a list predicates to the TunnelUpdate builder.
func (tuo *TunnelUpdateOne) Where(ps ...predicate.Tunnel) *TunnelUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TunnelUpdateOne) Select(field string, fields ...string) *TunnelUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tunnel entity.
func (tuo *TunnelUpdateOne) Save(ctx context.Context) (*Tunnel, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TunnelUpdateOne) SaveX(ctx context.Context) *Tunnel {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TunnelUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TunnelUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TunnelUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := tunnel.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TunnelUpdateOne) check() error {
	if v, ok := tuo.mutation.Domain(); ok {
		if err := tunnel.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Tunnel.domain": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Token(); ok {
		if err := tunnel.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Tunnel.token": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.TargetPort(); ok {
		if err := tunnel.TargetPortValidator(v); err != nil {
			return &ValidationError{Name: "target_port", err: fmt.Errorf(`ent: validator failed for field "Tunnel.target_port": %w`, err)}
		}
	}
	if tuo.mutation.OwnerCleared() && len(tuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tunnel.owner"`)
	}
	return nil
}

func (tuo *TunnelUpdateOne) sqlSave(ctx context.Context) (_node *Tunnel, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tunnel.Table, tunnel.Columns, sqlgraph.NewFieldSpec(tunnel.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tunnel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tunnel.FieldID)
		for _, f := range fields {
			if !tunnel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tunnel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tunnel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Domain(); ok {
		_spec.SetField(tunnel.FieldDomain, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Token(); ok {
		_spec.SetField(tunnel.FieldToken, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ClientIP(); ok {
		_spec.SetField(tunnel.FieldClientIP, field.TypeString, value)
	}
	if tuo.mutation.ClientIPCleared() {
		_spec.ClearField(tunnel.FieldClientIP, field.TypeString)
	}
	if value, ok := tuo.mutation.IsActive(); ok {
		_spec.SetField(tunnel.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.TargetPort(); ok {
		_spec.SetField(tunnel.FieldTargetPort, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedTargetPort(); ok {
		_spec.AddField(tunnel.FieldTargetPort, field.TypeInt, value)
	}
	if tuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tunnel.OwnerTable,
			Columns: []string{tunnel.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tunnel.OwnerTable,
			Columns: []string{tunnel.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tunnel{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tunnel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
