// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"giraffecloud/internal/db/ent/plan"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlanCreate is the builder for creating a Plan entity.
type PlanCreate struct {
	config
	mutation *PlanMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PlanCreate) SetCreatedAt(t time.Time) *PlanCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PlanCreate) SetNillableCreatedAt(t *time.Time) *PlanCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PlanCreate) SetUpdatedAt(t time.Time) *PlanCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PlanCreate) SetNillableUpdatedAt(t *time.Time) *PlanCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PlanCreate) SetName(s string) *PlanCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetMonthlyLimitBytes sets the "monthly_limit_bytes" field.
func (pc *PlanCreate) SetMonthlyLimitBytes(i int64) *PlanCreate {
	pc.mutation.SetMonthlyLimitBytes(i)
	return pc
}

// SetNillableMonthlyLimitBytes sets the "monthly_limit_bytes" field if the given value is not nil.
func (pc *PlanCreate) SetNillableMonthlyLimitBytes(i *int64) *PlanCreate {
	if i != nil {
		pc.SetMonthlyLimitBytes(*i)
	}
	return pc
}

// SetOveragePerGBCents sets the "overage_per_gb_cents" field.
func (pc *PlanCreate) SetOveragePerGBCents(i int) *PlanCreate {
	pc.mutation.SetOveragePerGBCents(i)
	return pc
}

// SetNillableOveragePerGBCents sets the "overage_per_gb_cents" field if the given value is not nil.
func (pc *PlanCreate) SetNillableOveragePerGBCents(i *int) *PlanCreate {
	if i != nil {
		pc.SetOveragePerGBCents(*i)
	}
	return pc
}

// SetActive sets the "active" field.
func (pc *PlanCreate) SetActive(b bool) *PlanCreate {
	pc.mutation.SetActive(b)
	return pc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pc *PlanCreate) SetNillableActive(b *bool) *PlanCreate {
	if b != nil {
		pc.SetActive(*b)
	}
	return pc
}

// Mutation returns the PlanMutation object of the builder.
func (pc *PlanCreate) Mutation() *PlanMutation {
	return pc.mutation
}

// Save creates the Plan in the database.
func (pc *PlanCreate) Save(ctx context.Context) (*Plan, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlanCreate) SaveX(ctx context.Context) *Plan {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlanCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlanCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlanCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := plan.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := plan.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.MonthlyLimitBytes(); !ok {
		v := plan.DefaultMonthlyLimitBytes
		pc.mutation.SetMonthlyLimitBytes(v)
	}
	if _, ok := pc.mutation.OveragePerGBCents(); !ok {
		v := plan.DefaultOveragePerGBCents
		pc.mutation.SetOveragePerGBCents(v)
	}
	if _, ok := pc.mutation.Active(); !ok {
		v := plan.DefaultActive
		pc.mutation.SetActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlanCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Plan.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Plan.updated_at"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Plan.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := plan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Plan.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.MonthlyLimitBytes(); !ok {
		return &ValidationError{Name: "monthly_limit_bytes", err: errors.New(`ent: missing required field "Plan.monthly_limit_bytes"`)}
	}
	if _, ok := pc.mutation.OveragePerGBCents(); !ok {
		return &ValidationError{Name: "overage_per_gb_cents", err: errors.New(`ent: missing required field "Plan.overage_per_gb_cents"`)}
	}
	if _, ok := pc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Plan.active"`)}
	}
	return nil
}

func (pc *PlanCreate) sqlSave(ctx context.Context) (*Plan, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PlanCreate) createSpec() (*Plan, *sqlgraph.CreateSpec) {
	var (
		_node = &Plan{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(plan.Table, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(plan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.MonthlyLimitBytes(); ok {
		_spec.SetField(plan.FieldMonthlyLimitBytes, field.TypeInt64, value)
		_node.MonthlyLimitBytes = value
	}
	if value, ok := pc.mutation.OveragePerGBCents(); ok {
		_spec.SetField(plan.FieldOveragePerGBCents, field.TypeInt, value)
		_node.OveragePerGBCents = value
	}
	if value, ok := pc.mutation.Active(); ok {
		_spec.SetField(plan.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	return _node, _spec
}

// PlanCreateBulk is the builder for creating many Plan entities in bulk.
type PlanCreateBulk struct {
	config
	err      error
	builders []*PlanCreate
}

// Save creates the Plan entities in the database.
func (pcb *PlanCreateBulk) Save(ctx context.Context) ([]*Plan, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Plan, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlanCreateBulk) SaveX(ctx context.Context) []*Plan {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlanCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlanCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
