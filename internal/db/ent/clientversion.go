// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"giraffecloud/internal/db/ent/clientversion"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ClientVersion is the model entity for the ClientVersion schema.
type ClientVersion struct {
	config `json:"-"`
	// ID of the ent.
	// Unique identifier for this version config
	ID string `json:"id,omitempty"`
	// Release channel: stable, beta, test
	Channel string `json:"channel,omitempty"`
	// Target platform: all, linux, darwin, windows
	Platform string `json:"platform,omitempty"`
	// Target architecture: all, amd64, arm64
	Arch string `json:"arch,omitempty"`
	// Latest available version for this channel
	LatestVersion string `json:"latest_version,omitempty"`
	// Minimum required version
	MinimumVersion string `json:"minimum_version,omitempty"`
	// Base download URL for this channel
	DownloadURL string `json:"download_url,omitempty"`
	// Release notes for the latest version
	ReleaseNotes string `json:"release_notes,omitempty"`
	// Whether auto-update is enabled for this channel
	AutoUpdateEnabled bool `json:"auto_update_enabled,omitempty"`
	// Force update even if user disabled auto-update
	ForceUpdate bool `json:"force_update,omitempty"`
	// Additional metadata for the version
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClientVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case clientversion.FieldMetadata:
			values[i] = new([]byte)
		case clientversion.FieldAutoUpdateEnabled, clientversion.FieldForceUpdate:
			values[i] = new(sql.NullBool)
		case clientversion.FieldID, clientversion.FieldChannel, clientversion.FieldPlatform, clientversion.FieldArch, clientversion.FieldLatestVersion, clientversion.FieldMinimumVersion, clientversion.FieldDownloadURL, clientversion.FieldReleaseNotes:
			values[i] = new(sql.NullString)
		case clientversion.FieldCreatedAt, clientversion.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClientVersion fields.
func (cv *ClientVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clientversion.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cv.ID = value.String
			}
		case clientversion.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				cv.Channel = value.String
			}
		case clientversion.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				cv.Platform = value.String
			}
		case clientversion.FieldArch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field arch", values[i])
			} else if value.Valid {
				cv.Arch = value.String
			}
		case clientversion.FieldLatestVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field latest_version", values[i])
			} else if value.Valid {
				cv.LatestVersion = value.String
			}
		case clientversion.FieldMinimumVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field minimum_version", values[i])
			} else if value.Valid {
				cv.MinimumVersion = value.String
			}
		case clientversion.FieldDownloadURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field download_url", values[i])
			} else if value.Valid {
				cv.DownloadURL = value.String
			}
		case clientversion.FieldReleaseNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field release_notes", values[i])
			} else if value.Valid {
				cv.ReleaseNotes = value.String
			}
		case clientversion.FieldAutoUpdateEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_update_enabled", values[i])
			} else if value.Valid {
				cv.AutoUpdateEnabled = value.Bool
			}
		case clientversion.FieldForceUpdate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field force_update", values[i])
			} else if value.Valid {
				cv.ForceUpdate = value.Bool
			}
		case clientversion.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cv.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case clientversion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cv.CreatedAt = value.Time
			}
		case clientversion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cv.UpdatedAt = value.Time
			}
		default:
			cv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ClientVersion.
// This includes values selected through modifiers, order, etc.
func (cv *ClientVersion) Value(name string) (ent.Value, error) {
	return cv.selectValues.Get(name)
}

// Update returns a builder for updating this ClientVersion.
// Note that you need to call ClientVersion.Unwrap() before calling this method if this ClientVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (cv *ClientVersion) Update() *ClientVersionUpdateOne {
	return NewClientVersionClient(cv.config).UpdateOne(cv)
}

// Unwrap unwraps the ClientVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cv *ClientVersion) Unwrap() *ClientVersion {
	_tx, ok := cv.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClientVersion is not a transactional entity")
	}
	cv.config.driver = _tx.drv
	return cv
}

// String implements the fmt.Stringer.
func (cv *ClientVersion) String() string {
	var builder strings.Builder
	builder.WriteString("ClientVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cv.ID))
	builder.WriteString("channel=")
	builder.WriteString(cv.Channel)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(cv.Platform)
	builder.WriteString(", ")
	builder.WriteString("arch=")
	builder.WriteString(cv.Arch)
	builder.WriteString(", ")
	builder.WriteString("latest_version=")
	builder.WriteString(cv.LatestVersion)
	builder.WriteString(", ")
	builder.WriteString("minimum_version=")
	builder.WriteString(cv.MinimumVersion)
	builder.WriteString(", ")
	builder.WriteString("download_url=")
	builder.WriteString(cv.DownloadURL)
	builder.WriteString(", ")
	builder.WriteString("release_notes=")
	builder.WriteString(cv.ReleaseNotes)
	builder.WriteString(", ")
	builder.WriteString("auto_update_enabled=")
	builder.WriteString(fmt.Sprintf("%v", cv.AutoUpdateEnabled))
	builder.WriteString(", ")
	builder.WriteString("force_update=")
	builder.WriteString(fmt.Sprintf("%v", cv.ForceUpdate))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", cv.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cv.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ClientVersions is a parsable slice of ClientVersion.
type ClientVersions []*ClientVersion
