// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"giraffecloud/internal/db/ent/clientversion"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClientVersionCreate is the builder for creating a ClientVersion entity.
type ClientVersionCreate struct {
	config
	mutation *ClientVersionMutation
	hooks    []Hook
}

// SetChannel sets the "channel" field.
func (cvc *ClientVersionCreate) SetChannel(s string) *ClientVersionCreate {
	cvc.mutation.SetChannel(s)
	return cvc
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableChannel(s *string) *ClientVersionCreate {
	if s != nil {
		cvc.SetChannel(*s)
	}
	return cvc
}

// SetPlatform sets the "platform" field.
func (cvc *ClientVersionCreate) SetPlatform(s string) *ClientVersionCreate {
	cvc.mutation.SetPlatform(s)
	return cvc
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillablePlatform(s *string) *ClientVersionCreate {
	if s != nil {
		cvc.SetPlatform(*s)
	}
	return cvc
}

// SetArch sets the "arch" field.
func (cvc *ClientVersionCreate) SetArch(s string) *ClientVersionCreate {
	cvc.mutation.SetArch(s)
	return cvc
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableArch(s *string) *ClientVersionCreate {
	if s != nil {
		cvc.SetArch(*s)
	}
	return cvc
}

// SetLatestVersion sets the "latest_version" field.
func (cvc *ClientVersionCreate) SetLatestVersion(s string) *ClientVersionCreate {
	cvc.mutation.SetLatestVersion(s)
	return cvc
}

// SetMinimumVersion sets the "minimum_version" field.
func (cvc *ClientVersionCreate) SetMinimumVersion(s string) *ClientVersionCreate {
	cvc.mutation.SetMinimumVersion(s)
	return cvc
}

// SetDownloadURL sets the "download_url" field.
func (cvc *ClientVersionCreate) SetDownloadURL(s string) *ClientVersionCreate {
	cvc.mutation.SetDownloadURL(s)
	return cvc
}

// SetReleaseNotes sets the "release_notes" field.
func (cvc *ClientVersionCreate) SetReleaseNotes(s string) *ClientVersionCreate {
	cvc.mutation.SetReleaseNotes(s)
	return cvc
}

// SetNillableReleaseNotes sets the "release_notes" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableReleaseNotes(s *string) *ClientVersionCreate {
	if s != nil {
		cvc.SetReleaseNotes(*s)
	}
	return cvc
}

// SetAutoUpdateEnabled sets the "auto_update_enabled" field.
func (cvc *ClientVersionCreate) SetAutoUpdateEnabled(b bool) *ClientVersionCreate {
	cvc.mutation.SetAutoUpdateEnabled(b)
	return cvc
}

// SetNillableAutoUpdateEnabled sets the "auto_update_enabled" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableAutoUpdateEnabled(b *bool) *ClientVersionCreate {
	if b != nil {
		cvc.SetAutoUpdateEnabled(*b)
	}
	return cvc
}

// SetForceUpdate sets the "force_update" field.
func (cvc *ClientVersionCreate) SetForceUpdate(b bool) *ClientVersionCreate {
	cvc.mutation.SetForceUpdate(b)
	return cvc
}

// SetNillableForceUpdate sets the "force_update" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableForceUpdate(b *bool) *ClientVersionCreate {
	if b != nil {
		cvc.SetForceUpdate(*b)
	}
	return cvc
}

// SetMetadata sets the "metadata" field.
func (cvc *ClientVersionCreate) SetMetadata(m map[string]interface{}) *ClientVersionCreate {
	cvc.mutation.SetMetadata(m)
	return cvc
}

// SetCreatedAt sets the "created_at" field.
func (cvc *ClientVersionCreate) SetCreatedAt(t time.Time) *ClientVersionCreate {
	cvc.mutation.SetCreatedAt(t)
	return cvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableCreatedAt(t *time.Time) *ClientVersionCreate {
	if t != nil {
		cvc.SetCreatedAt(*t)
	}
	return cvc
}

// SetUpdatedAt sets the "updated_at" field.
func (cvc *ClientVersionCreate) SetUpdatedAt(t time.Time) *ClientVersionCreate {
	cvc.mutation.SetUpdatedAt(t)
	return cvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cvc *ClientVersionCreate) SetNillableUpdatedAt(t *time.Time) *ClientVersionCreate {
	if t != nil {
		cvc.SetUpdatedAt(*t)
	}
	return cvc
}

// SetID sets the "id" field.
func (cvc *ClientVersionCreate) SetID(s string) *ClientVersionCreate {
	cvc.mutation.SetID(s)
	return cvc
}

// Mutation returns the ClientVersionMutation object of the builder.
func (cvc *ClientVersionCreate) Mutation() *ClientVersionMutation {
	return cvc.mutation
}

// Save creates the ClientVersion in the database.
func (cvc *ClientVersionCreate) Save(ctx context.Context) (*ClientVersion, error) {
	cvc.defaults()
	return withHooks(ctx, cvc.sqlSave, cvc.mutation, cvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cvc *ClientVersionCreate) SaveX(ctx context.Context) *ClientVersion {
	v, err := cvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cvc *ClientVersionCreate) Exec(ctx context.Context) error {
	_, err := cvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvc *ClientVersionCreate) ExecX(ctx context.Context) {
	if err := cvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cvc *ClientVersionCreate) defaults() {
	if _, ok := cvc.mutation.Channel(); !ok {
		v := clientversion.DefaultChannel
		cvc.mutation.SetChannel(v)
	}
	if _, ok := cvc.mutation.Platform(); !ok {
		v := clientversion.DefaultPlatform
		cvc.mutation.SetPlatform(v)
	}
	if _, ok := cvc.mutation.Arch(); !ok {
		v := clientversion.DefaultArch
		cvc.mutation.SetArch(v)
	}
	if _, ok := cvc.mutation.AutoUpdateEnabled(); !ok {
		v := clientversion.DefaultAutoUpdateEnabled
		cvc.mutation.SetAutoUpdateEnabled(v)
	}
	if _, ok := cvc.mutation.ForceUpdate(); !ok {
		v := clientversion.DefaultForceUpdate
		cvc.mutation.SetForceUpdate(v)
	}
	if _, ok := cvc.mutation.CreatedAt(); !ok {
		v := clientversion.DefaultCreatedAt()
		cvc.mutation.SetCreatedAt(v)
	}
	if _, ok := cvc.mutation.UpdatedAt(); !ok {
		v := clientversion.DefaultUpdatedAt()
		cvc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cvc *ClientVersionCreate) check() error {
	if _, ok := cvc.mutation.Channel(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required field "ClientVersion.channel"`)}
	}
	if _, ok := cvc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "ClientVersion.platform"`)}
	}
	if _, ok := cvc.mutation.Arch(); !ok {
		return &ValidationError{Name: "arch", err: errors.New(`ent: missing required field "ClientVersion.arch"`)}
	}
	if _, ok := cvc.mutation.LatestVersion(); !ok {
		return &ValidationError{Name: "latest_version", err: errors.New(`ent: missing required field "ClientVersion.latest_version"`)}
	}
	if _, ok := cvc.mutation.MinimumVersion(); !ok {
		return &ValidationError{Name: "minimum_version", err: errors.New(`ent: missing required field "ClientVersion.minimum_version"`)}
	}
	if _, ok := cvc.mutation.DownloadURL(); !ok {
		return &ValidationError{Name: "download_url", err: errors.New(`ent: missing required field "ClientVersion.download_url"`)}
	}
	if _, ok := cvc.mutation.AutoUpdateEnabled(); !ok {
		return &ValidationError{Name: "auto_update_enabled", err: errors.New(`ent: missing required field "ClientVersion.auto_update_enabled"`)}
	}
	if _, ok := cvc.mutation.ForceUpdate(); !ok {
		return &ValidationError{Name: "force_update", err: errors.New(`ent: missing required field "ClientVersion.force_update"`)}
	}
	if _, ok := cvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ClientVersion.created_at"`)}
	}
	if _, ok := cvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ClientVersion.updated_at"`)}
	}
	return nil
}

func (cvc *ClientVersionCreate) sqlSave(ctx context.Context) (*ClientVersion, error) {
	if err := cvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ClientVersion.ID type: %T", _spec.ID.Value)
		}
	}
	cvc.mutation.id = &_node.ID
	cvc.mutation.done = true
	return _node, nil
}

func (cvc *ClientVersionCreate) createSpec() (*ClientVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &ClientVersion{config: cvc.config}
		_spec = sqlgraph.NewCreateSpec(clientversion.Table, sqlgraph.NewFieldSpec(clientversion.FieldID, field.TypeString))
	)
	if id, ok := cvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cvc.mutation.Channel(); ok {
		_spec.SetField(clientversion.FieldChannel, field.TypeString, value)
		_node.Channel = value
	}
	if value, ok := cvc.mutation.Platform(); ok {
		_spec.SetField(clientversion.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := cvc.mutation.Arch(); ok {
		_spec.SetField(clientversion.FieldArch, field.TypeString, value)
		_node.Arch = value
	}
	if value, ok := cvc.mutation.LatestVersion(); ok {
		_spec.SetField(clientversion.FieldLatestVersion, field.TypeString, value)
		_node.LatestVersion = value
	}
	if value, ok := cvc.mutation.MinimumVersion(); ok {
		_spec.SetField(clientversion.FieldMinimumVersion, field.TypeString, value)
		_node.MinimumVersion = value
	}
	if value, ok := cvc.mutation.DownloadURL(); ok {
		_spec.SetField(clientversion.FieldDownloadURL, field.TypeString, value)
		_node.DownloadURL = value
	}
	if value, ok := cvc.mutation.ReleaseNotes(); ok {
		_spec.SetField(clientversion.FieldReleaseNotes, field.TypeString, value)
		_node.ReleaseNotes = value
	}
	if value, ok := cvc.mutation.AutoUpdateEnabled(); ok {
		_spec.SetField(clientversion.FieldAutoUpdateEnabled, field.TypeBool, value)
		_node.AutoUpdateEnabled = value
	}
	if value, ok := cvc.mutation.ForceUpdate(); ok {
		_spec.SetField(clientversion.FieldForceUpdate, field.TypeBool, value)
		_node.ForceUpdate = value
	}
	if value, ok := cvc.mutation.Metadata(); ok {
		_spec.SetField(clientversion.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := cvc.mutation.CreatedAt(); ok {
		_spec.SetField(clientversion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cvc.mutation.UpdatedAt(); ok {
		_spec.SetField(clientversion.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ClientVersionCreateBulk is the builder for creating many ClientVersion entities in bulk.
type ClientVersionCreateBulk struct {
	config
	err      error
	builders []*ClientVersionCreate
}

// Save creates the ClientVersion entities in the database.
func (cvcb *ClientVersionCreateBulk) Save(ctx context.Context) ([]*ClientVersion, error) {
	if cvcb.err != nil {
		return nil, cvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cvcb.builders))
	nodes := make([]*ClientVersion, len(cvcb.builders))
	mutators := make([]Mutator, len(cvcb.builders))
	for i := range cvcb.builders {
		func(i int, root context.Context) {
			builder := cvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClientVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cvcb *ClientVersionCreateBulk) SaveX(ctx context.Context) []*ClientVersion {
	v, err := cvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cvcb *ClientVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := cvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvcb *ClientVersionCreateBulk) ExecX(ctx context.Context) {
	if err := cvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
