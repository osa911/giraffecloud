// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"giraffecloud/internal/db/ent/clientversion"
	"giraffecloud/internal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClientVersionUpdate is the builder for updating ClientVersion entities.
type ClientVersionUpdate struct {
	config
	hooks    []Hook
	mutation *ClientVersionMutation
}

// Where appends a list predicates to the ClientVersionUpdate builder.
func (cvu *ClientVersionUpdate) Where(ps ...predicate.ClientVersion) *ClientVersionUpdate {
	cvu.mutation.Where(ps...)
	return cvu
}

// SetChannel sets the "channel" field.
func (cvu *ClientVersionUpdate) SetChannel(s string) *ClientVersionUpdate {
	cvu.mutation.SetChannel(s)
	return cvu
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillableChannel(s *string) *ClientVersionUpdate {
	if s != nil {
		cvu.SetChannel(*s)
	}
	return cvu
}

// SetPlatform sets the "platform" field.
func (cvu *ClientVersionUpdate) SetPlatform(s string) *ClientVersionUpdate {
	cvu.mutation.SetPlatform(s)
	return cvu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillablePlatform(s *string) *ClientVersionUpdate {
	if s != nil {
		cvu.SetPlatform(*s)
	}
	return cvu
}

// SetArch sets the "arch" field.
func (cvu *ClientVersionUpdate) SetArch(s string) *ClientVersionUpdate {
	cvu.mutation.SetArch(s)
	return cvu
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillableArch(s *string) *ClientVersionUpdate {
	if s != nil {
		cvu.SetArch(*s)
	}
	return cvu
}

// SetLatestVersion sets the "latest_version" field.
func (cvu *ClientVersionUpdate) SetLatestVersion(s string) *ClientVersionUpdate {
	cvu.mutation.SetLatestVersion(s)
	return cvu
}

// SetNillableLatestVersion sets the "latest_version" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillableLatestVersion(s *string) *ClientVersionUpdate {
	if s != nil {
		cvu.SetLatestVersion(*s)
	}
	return cvu
}

// SetMinimumVersion sets the "minimum_version" field.
func (cvu *ClientVersionUpdate) SetMinimumVersion(s string) *ClientVersionUpdate {
	cvu.mutation.SetMinimumVersion(s)
	return cvu
}

// SetNillableMinimumVersion sets the "minimum_version" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillableMinimumVersion(s *string) *ClientVersionUpdate {
	if s != nil {
		cvu.SetMinimumVersion(*s)
	}
	return cvu
}

// SetDownloadURL sets the "download_url" field.
func (cvu *ClientVersionUpdate) SetDownloadURL(s string) *ClientVersionUpdate {
	cvu.mutation.SetDownloadURL(s)
	return cvu
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillableDownloadURL(s *string) *ClientVersionUpdate {
	if s != nil {
		cvu.SetDownloadURL(*s)
	}
	return cvu
}

// SetReleaseNotes sets the "release_notes" field.
func (cvu *ClientVersionUpdate) SetReleaseNotes(s string) *ClientVersionUpdate {
	cvu.mutation.SetReleaseNotes(s)
	return cvu
}

// SetNillableReleaseNotes sets the "release_notes" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillableReleaseNotes(s *string) *ClientVersionUpdate {
	if s != nil {
		cvu.SetReleaseNotes(*s)
	}
	return cvu
}

// ClearReleaseNotes clears the value of the "release_notes" field.
func (cvu *ClientVersionUpdate) ClearReleaseNotes() *ClientVersionUpdate {
	cvu.mutation.ClearReleaseNotes()
	return cvu
}

// SetAutoUpdateEnabled sets the "auto_update_enabled" field.
func (cvu *ClientVersionUpdate) SetAutoUpdateEnabled(b bool) *ClientVersionUpdate {
	cvu.mutation.SetAutoUpdateEnabled(b)
	return cvu
}

// SetNillableAutoUpdateEnabled sets the "auto_update_enabled" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillableAutoUpdateEnabled(b *bool) *ClientVersionUpdate {
	if b != nil {
		cvu.SetAutoUpdateEnabled(*b)
	}
	return cvu
}

// SetForceUpdate sets the "force_update" field.
func (cvu *ClientVersionUpdate) SetForceUpdate(b bool) *ClientVersionUpdate {
	cvu.mutation.SetForceUpdate(b)
	return cvu
}

// SetNillableForceUpdate sets the "force_update" field if the given value is not nil.
func (cvu *ClientVersionUpdate) SetNillableForceUpdate(b *bool) *ClientVersionUpdate {
	if b != nil {
		cvu.SetForceUpdate(*b)
	}
	return cvu
}

// SetMetadata sets the "metadata" field.
func (cvu *ClientVersionUpdate) SetMetadata(m map[string]interface{}) *ClientVersionUpdate {
	cvu.mutation.SetMetadata(m)
	return cvu
}

// ClearMetadata clears the value of the "metadata" field.
func (cvu *ClientVersionUpdate) ClearMetadata() *ClientVersionUpdate {
	cvu.mutation.ClearMetadata()
	return cvu
}

// SetUpdatedAt sets the "updated_at" field.
func (cvu *ClientVersionUpdate) SetUpdatedAt(t time.Time) *ClientVersionUpdate {
	cvu.mutation.SetUpdatedAt(t)
	return cvu
}

// Mutation returns the ClientVersionMutation object of the builder.
func (cvu *ClientVersionUpdate) Mutation() *ClientVersionMutation {
	return cvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cvu *ClientVersionUpdate) Save(ctx context.Context) (int, error) {
	cvu.defaults()
	return withHooks(ctx, cvu.sqlSave, cvu.mutation, cvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cvu *ClientVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := cvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cvu *ClientVersionUpdate) Exec(ctx context.Context) error {
	_, err := cvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvu *ClientVersionUpdate) ExecX(ctx context.Context) {
	if err := cvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cvu *ClientVersionUpdate) defaults() {
	if _, ok := cvu.mutation.UpdatedAt(); !ok {
		v := clientversion.UpdateDefaultUpdatedAt()
		cvu.mutation.SetUpdatedAt(v)
	}
}

func (cvu *ClientVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(clientversion.Table, clientversion.Columns, sqlgraph.NewFieldSpec(clientversion.FieldID, field.TypeString))
	if ps := cvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cvu.mutation.Channel(); ok {
		_spec.SetField(clientversion.FieldChannel, field.TypeString, value)
	}
	if value, ok := cvu.mutation.Platform(); ok {
		_spec.SetField(clientversion.FieldPlatform, field.TypeString, value)
	}
	if value, ok := cvu.mutation.Arch(); ok {
		_spec.SetField(clientversion.FieldArch, field.TypeString, value)
	}
	if value, ok := cvu.mutation.LatestVersion(); ok {
		_spec.SetField(clientversion.FieldLatestVersion, field.TypeString, value)
	}
	if value, ok := cvu.mutation.MinimumVersion(); ok {
		_spec.SetField(clientversion.FieldMinimumVersion, field.TypeString, value)
	}
	if value, ok := cvu.mutation.DownloadURL(); ok {
		_spec.SetField(clientversion.FieldDownloadURL, field.TypeString, value)
	}
	if value, ok := cvu.mutation.ReleaseNotes(); ok {
		_spec.SetField(clientversion.FieldReleaseNotes, field.TypeString, value)
	}
	if cvu.mutation.ReleaseNotesCleared() {
		_spec.ClearField(clientversion.FieldReleaseNotes, field.TypeString)
	}
	if value, ok := cvu.mutation.AutoUpdateEnabled(); ok {
		_spec.SetField(clientversion.FieldAutoUpdateEnabled, field.TypeBool, value)
	}
	if value, ok := cvu.mutation.ForceUpdate(); ok {
		_spec.SetField(clientversion.FieldForceUpdate, field.TypeBool, value)
	}
	if value, ok := cvu.mutation.Metadata(); ok {
		_spec.SetField(clientversion.FieldMetadata, field.TypeJSON, value)
	}
	if cvu.mutation.MetadataCleared() {
		_spec.ClearField(clientversion.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cvu.mutation.UpdatedAt(); ok {
		_spec.SetField(clientversion.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clientversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cvu.mutation.done = true
	return n, nil
}

// ClientVersionUpdateOne is the builder for updating a single ClientVersion entity.
type ClientVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClientVersionMutation
}

// SetChannel sets the "channel" field.
func (cvuo *ClientVersionUpdateOne) SetChannel(s string) *ClientVersionUpdateOne {
	cvuo.mutation.SetChannel(s)
	return cvuo
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillableChannel(s *string) *ClientVersionUpdateOne {
	if s != nil {
		cvuo.SetChannel(*s)
	}
	return cvuo
}

// SetPlatform sets the "platform" field.
func (cvuo *ClientVersionUpdateOne) SetPlatform(s string) *ClientVersionUpdateOne {
	cvuo.mutation.SetPlatform(s)
	return cvuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillablePlatform(s *string) *ClientVersionUpdateOne {
	if s != nil {
		cvuo.SetPlatform(*s)
	}
	return cvuo
}

// SetArch sets the "arch" field.
func (cvuo *ClientVersionUpdateOne) SetArch(s string) *ClientVersionUpdateOne {
	cvuo.mutation.SetArch(s)
	return cvuo
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillableArch(s *string) *ClientVersionUpdateOne {
	if s != nil {
		cvuo.SetArch(*s)
	}
	return cvuo
}

// SetLatestVersion sets the "latest_version" field.
func (cvuo *ClientVersionUpdateOne) SetLatestVersion(s string) *ClientVersionUpdateOne {
	cvuo.mutation.SetLatestVersion(s)
	return cvuo
}

// SetNillableLatestVersion sets the "latest_version" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillableLatestVersion(s *string) *ClientVersionUpdateOne {
	if s != nil {
		cvuo.SetLatestVersion(*s)
	}
	return cvuo
}

// SetMinimumVersion sets the "minimum_version" field.
func (cvuo *ClientVersionUpdateOne) SetMinimumVersion(s string) *ClientVersionUpdateOne {
	cvuo.mutation.SetMinimumVersion(s)
	return cvuo
}

// SetNillableMinimumVersion sets the "minimum_version" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillableMinimumVersion(s *string) *ClientVersionUpdateOne {
	if s != nil {
		cvuo.SetMinimumVersion(*s)
	}
	return cvuo
}

// SetDownloadURL sets the "download_url" field.
func (cvuo *ClientVersionUpdateOne) SetDownloadURL(s string) *ClientVersionUpdateOne {
	cvuo.mutation.SetDownloadURL(s)
	return cvuo
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillableDownloadURL(s *string) *ClientVersionUpdateOne {
	if s != nil {
		cvuo.SetDownloadURL(*s)
	}
	return cvuo
}

// SetReleaseNotes sets the "release_notes" field.
func (cvuo *ClientVersionUpdateOne) SetReleaseNotes(s string) *ClientVersionUpdateOne {
	cvuo.mutation.SetReleaseNotes(s)
	return cvuo
}

// SetNillableReleaseNotes sets the "release_notes" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillableReleaseNotes(s *string) *ClientVersionUpdateOne {
	if s != nil {
		cvuo.SetReleaseNotes(*s)
	}
	return cvuo
}

// ClearReleaseNotes clears the value of the "release_notes" field.
func (cvuo *ClientVersionUpdateOne) ClearReleaseNotes() *ClientVersionUpdateOne {
	cvuo.mutation.ClearReleaseNotes()
	return cvuo
}

// SetAutoUpdateEnabled sets the "auto_update_enabled" field.
func (cvuo *ClientVersionUpdateOne) SetAutoUpdateEnabled(b bool) *ClientVersionUpdateOne {
	cvuo.mutation.SetAutoUpdateEnabled(b)
	return cvuo
}

// SetNillableAutoUpdateEnabled sets the "auto_update_enabled" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillableAutoUpdateEnabled(b *bool) *ClientVersionUpdateOne {
	if b != nil {
		cvuo.SetAutoUpdateEnabled(*b)
	}
	return cvuo
}

// SetForceUpdate sets the "force_update" field.
func (cvuo *ClientVersionUpdateOne) SetForceUpdate(b bool) *ClientVersionUpdateOne {
	cvuo.mutation.SetForceUpdate(b)
	return cvuo
}

// SetNillableForceUpdate sets the "force_update" field if the given value is not nil.
func (cvuo *ClientVersionUpdateOne) SetNillableForceUpdate(b *bool) *ClientVersionUpdateOne {
	if b != nil {
		cvuo.SetForceUpdate(*b)
	}
	return cvuo
}

// SetMetadata sets the "metadata" field.
func (cvuo *ClientVersionUpdateOne) SetMetadata(m map[string]interface{}) *ClientVersionUpdateOne {
	cvuo.mutation.SetMetadata(m)
	return cvuo
}

// ClearMetadata clears the value of the "metadata" field.
func (cvuo *ClientVersionUpdateOne) ClearMetadata() *ClientVersionUpdateOne {
	cvuo.mutation.ClearMetadata()
	return cvuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cvuo *ClientVersionUpdateOne) SetUpdatedAt(t time.Time) *ClientVersionUpdateOne {
	cvuo.mutation.SetUpdatedAt(t)
	return cvuo
}

// Mutation returns the ClientVersionMutation object of the builder.
func (cvuo *ClientVersionUpdateOne) Mutation() *ClientVersionMutation {
	return cvuo.mutation
}

// Where appends a list predicates to the ClientVersionUpdate builder.
func (cvuo *ClientVersionUpdateOne) Where(ps ...predicate.ClientVersion) *ClientVersionUpdateOne {
	cvuo.mutation.Where(ps...)
	return cvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cvuo *ClientVersionUpdateOne) Select(field string, fields ...string) *ClientVersionUpdateOne {
	cvuo.fields = append([]string{field}, fields...)
	return cvuo
}

// Save executes the query and returns the updated ClientVersion entity.
func (cvuo *ClientVersionUpdateOne) Save(ctx context.Context) (*ClientVersion, error) {
	cvuo.defaults()
	return withHooks(ctx, cvuo.sqlSave, cvuo.mutation, cvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cvuo *ClientVersionUpdateOne) SaveX(ctx context.Context) *ClientVersion {
	node, err := cvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cvuo *ClientVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := cvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvuo *ClientVersionUpdateOne) ExecX(ctx context.Context) {
	if err := cvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cvuo *ClientVersionUpdateOne) defaults() {
	if _, ok := cvuo.mutation.UpdatedAt(); !ok {
		v := clientversion.UpdateDefaultUpdatedAt()
		cvuo.mutation.SetUpdatedAt(v)
	}
}

func (cvuo *ClientVersionUpdateOne) sqlSave(ctx context.Context) (_node *ClientVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(clientversion.Table, clientversion.Columns, sqlgraph.NewFieldSpec(clientversion.FieldID, field.TypeString))
	id, ok := cvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ClientVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clientversion.FieldID)
		for _, f := range fields {
			if !clientversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clientversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cvuo.mutation.Channel(); ok {
		_spec.SetField(clientversion.FieldChannel, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.Platform(); ok {
		_spec.SetField(clientversion.FieldPlatform, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.Arch(); ok {
		_spec.SetField(clientversion.FieldArch, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.LatestVersion(); ok {
		_spec.SetField(clientversion.FieldLatestVersion, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.MinimumVersion(); ok {
		_spec.SetField(clientversion.FieldMinimumVersion, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.DownloadURL(); ok {
		_spec.SetField(clientversion.FieldDownloadURL, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.ReleaseNotes(); ok {
		_spec.SetField(clientversion.FieldReleaseNotes, field.TypeString, value)
	}
	if cvuo.mutation.ReleaseNotesCleared() {
		_spec.ClearField(clientversion.FieldReleaseNotes, field.TypeString)
	}
	if value, ok := cvuo.mutation.AutoUpdateEnabled(); ok {
		_spec.SetField(clientversion.FieldAutoUpdateEnabled, field.TypeBool, value)
	}
	if value, ok := cvuo.mutation.ForceUpdate(); ok {
		_spec.SetField(clientversion.FieldForceUpdate, field.TypeBool, value)
	}
	if value, ok := cvuo.mutation.Metadata(); ok {
		_spec.SetField(clientversion.FieldMetadata, field.TypeJSON, value)
	}
	if cvuo.mutation.MetadataCleared() {
		_spec.ClearField(clientversion.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(clientversion.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ClientVersion{config: cvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clientversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cvuo.mutation.done = true
	return _node, nil
}
