// Code generated by ent, DO NOT EDIT.

package clientversion

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the clientversion type in the database.
	Label = "client_version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChannel holds the string denoting the channel field in the database.
	FieldChannel = "channel"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldArch holds the string denoting the arch field in the database.
	FieldArch = "arch"
	// FieldLatestVersion holds the string denoting the latest_version field in the database.
	FieldLatestVersion = "latest_version"
	// FieldMinimumVersion holds the string denoting the minimum_version field in the database.
	FieldMinimumVersion = "minimum_version"
	// FieldDownloadURL holds the string denoting the download_url field in the database.
	FieldDownloadURL = "download_url"
	// FieldReleaseNotes holds the string denoting the release_notes field in the database.
	FieldReleaseNotes = "release_notes"
	// FieldAutoUpdateEnabled holds the string denoting the auto_update_enabled field in the database.
	FieldAutoUpdateEnabled = "auto_update_enabled"
	// FieldForceUpdate holds the string denoting the force_update field in the database.
	FieldForceUpdate = "force_update"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the clientversion in the database.
	Table = "client_versions"
)

// Columns holds all SQL columns for clientversion fields.
var Columns = []string{
	FieldID,
	FieldChannel,
	FieldPlatform,
	FieldArch,
	FieldLatestVersion,
	FieldMinimumVersion,
	FieldDownloadURL,
	FieldReleaseNotes,
	FieldAutoUpdateEnabled,
	FieldForceUpdate,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultChannel holds the default value on creation for the "channel" field.
	DefaultChannel string
	// DefaultPlatform holds the default value on creation for the "platform" field.
	DefaultPlatform string
	// DefaultArch holds the default value on creation for the "arch" field.
	DefaultArch string
	// DefaultAutoUpdateEnabled holds the default value on creation for the "auto_update_enabled" field.
	DefaultAutoUpdateEnabled bool
	// DefaultForceUpdate holds the default value on creation for the "force_update" field.
	DefaultForceUpdate bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ClientVersion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChannel orders the results by the channel field.
func ByChannel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannel, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByArch orders the results by the arch field.
func ByArch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArch, opts...).ToFunc()
}

// ByLatestVersion orders the results by the latest_version field.
func ByLatestVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatestVersion, opts...).ToFunc()
}

// ByMinimumVersion orders the results by the minimum_version field.
func ByMinimumVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinimumVersion, opts...).ToFunc()
}

// ByDownloadURL orders the results by the download_url field.
func ByDownloadURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadURL, opts...).ToFunc()
}

// ByReleaseNotes orders the results by the release_notes field.
func ByReleaseNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleaseNotes, opts...).ToFunc()
}

// ByAutoUpdateEnabled orders the results by the auto_update_enabled field.
func ByAutoUpdateEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoUpdateEnabled, opts...).ToFunc()
}

// ByForceUpdate orders the results by the force_update field.
func ByForceUpdate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForceUpdate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
