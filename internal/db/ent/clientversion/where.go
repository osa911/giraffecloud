// Code generated by ent, DO NOT EDIT.

package clientversion

import (
	"giraffecloud/internal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContainsFold(FieldID, id))
}

// Channel applies equality check predicate on the "channel" field. It's identical to ChannelEQ.
func Channel(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldChannel, v))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldPlatform, v))
}

// Arch applies equality check predicate on the "arch" field. It's identical to ArchEQ.
func Arch(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldArch, v))
}

// LatestVersion applies equality check predicate on the "latest_version" field. It's identical to LatestVersionEQ.
func LatestVersion(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldLatestVersion, v))
}

// MinimumVersion applies equality check predicate on the "minimum_version" field. It's identical to MinimumVersionEQ.
func MinimumVersion(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldMinimumVersion, v))
}

// DownloadURL applies equality check predicate on the "download_url" field. It's identical to DownloadURLEQ.
func DownloadURL(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldDownloadURL, v))
}

// ReleaseNotes applies equality check predicate on the "release_notes" field. It's identical to ReleaseNotesEQ.
func ReleaseNotes(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldReleaseNotes, v))
}

// AutoUpdateEnabled applies equality check predicate on the "auto_update_enabled" field. It's identical to AutoUpdateEnabledEQ.
func AutoUpdateEnabled(v bool) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldAutoUpdateEnabled, v))
}

// ForceUpdate applies equality check predicate on the "force_update" field. It's identical to ForceUpdateEQ.
func ForceUpdate(v bool) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldForceUpdate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldUpdatedAt, v))
}

// ChannelEQ applies the EQ predicate on the "channel" field.
func ChannelEQ(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldChannel, v))
}

// ChannelNEQ applies the NEQ predicate on the "channel" field.
func ChannelNEQ(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNEQ(FieldChannel, v))
}

// ChannelIn applies the In predicate on the "channel" field.
func ChannelIn(vs ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldIn(FieldChannel, vs...))
}

// ChannelNotIn applies the NotIn predicate on the "channel" field.
func ChannelNotIn(vs ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNotIn(FieldChannel, vs...))
}

// ChannelGT applies the GT predicate on the "channel" field.
func ChannelGT(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGT(FieldChannel, v))
}

// ChannelGTE applies the GTE predicate on the "channel" field.
func ChannelGTE(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGTE(FieldChannel, v))
}

// ChannelLT applies the LT predicate on the "channel" field.
func ChannelLT(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLT(FieldChannel, v))
}

// ChannelLTE applies the LTE predicate on the "channel" field.
func ChannelLTE(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLTE(FieldChannel, v))
}

// ChannelContains applies the Contains predicate on the "channel" field.
func ChannelContains(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContains(FieldChannel, v))
}

// ChannelHasPrefix applies the HasPrefix predicate on the "channel" field.
func ChannelHasPrefix(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldHasPrefix(FieldChannel, v))
}

// ChannelHasSuffix applies the HasSuffix predicate on the "channel" field.
func ChannelHasSuffix(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldHasSuffix(FieldChannel, v))
}

// ChannelEqualFold applies the EqualFold predicate on the "channel" field.
func ChannelEqualFold(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEqualFold(FieldChannel, v))
}

// ChannelContainsFold applies the ContainsFold predicate on the "channel" field.
func ChannelContainsFold(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContainsFold(FieldChannel, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContainsFold(FieldPlatform, v))
}

// ArchEQ applies the EQ predicate on the "arch" field.
func ArchEQ(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldArch, v))
}

// ArchNEQ applies the NEQ predicate on the "arch" field.
func ArchNEQ(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNEQ(FieldArch, v))
}

// ArchIn applies the In predicate on the "arch" field.
func ArchIn(vs ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldIn(FieldArch, vs...))
}

// ArchNotIn applies the NotIn predicate on the "arch" field.
func ArchNotIn(vs ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNotIn(FieldArch, vs...))
}

// ArchGT applies the GT predicate on the "arch" field.
func ArchGT(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGT(FieldArch, v))
}

// ArchGTE applies the GTE predicate on the "arch" field.
func ArchGTE(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGTE(FieldArch, v))
}

// ArchLT applies the LT predicate on the "arch" field.
func ArchLT(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLT(FieldArch, v))
}

// ArchLTE applies the LTE predicate on the "arch" field.
func ArchLTE(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLTE(FieldArch, v))
}

// ArchContains applies the Contains predicate on the "arch" field.
func ArchContains(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContains(FieldArch, v))
}

// ArchHasPrefix applies the HasPrefix predicate on the "arch" field.
func ArchHasPrefix(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldHasPrefix(FieldArch, v))
}

// ArchHasSuffix applies the HasSuffix predicate on the "arch" field.
func ArchHasSuffix(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldHasSuffix(FieldArch, v))
}

// ArchEqualFold applies the EqualFold predicate on the "arch" field.
func ArchEqualFold(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEqualFold(FieldArch, v))
}

// ArchContainsFold applies the ContainsFold predicate on the "arch" field.
func ArchContainsFold(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContainsFold(FieldArch, v))
}

// LatestVersionEQ applies the EQ predicate on the "latest_version" field.
func LatestVersionEQ(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldLatestVersion, v))
}

// LatestVersionNEQ applies the NEQ predicate on the "latest_version" field.
func LatestVersionNEQ(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNEQ(FieldLatestVersion, v))
}

// LatestVersionIn applies the In predicate on the "latest_version" field.
func LatestVersionIn(vs ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldIn(FieldLatestVersion, vs...))
}

// LatestVersionNotIn applies the NotIn predicate on the "latest_version" field.
func LatestVersionNotIn(vs ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNotIn(FieldLatestVersion, vs...))
}

// LatestVersionGT applies the GT predicate on the "latest_version" field.
func LatestVersionGT(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGT(FieldLatestVersion, v))
}

// LatestVersionGTE applies the GTE predicate on the "latest_version" field.
func LatestVersionGTE(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGTE(FieldLatestVersion, v))
}

// LatestVersionLT applies the LT predicate on the "latest_version" field.
func LatestVersionLT(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLT(FieldLatestVersion, v))
}

// LatestVersionLTE applies the LTE predicate on the "latest_version" field.
func LatestVersionLTE(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLTE(FieldLatestVersion, v))
}

// LatestVersionContains applies the Contains predicate on the "latest_version" field.
func LatestVersionContains(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContains(FieldLatestVersion, v))
}

// LatestVersionHasPrefix applies the HasPrefix predicate on the "latest_version" field.
func LatestVersionHasPrefix(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldHasPrefix(FieldLatestVersion, v))
}

// LatestVersionHasSuffix applies the HasSuffix predicate on the "latest_version" field.
func LatestVersionHasSuffix(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldHasSuffix(FieldLatestVersion, v))
}

// LatestVersionEqualFold applies the EqualFold predicate on the "latest_version" field.
func LatestVersionEqualFold(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEqualFold(FieldLatestVersion, v))
}

// LatestVersionContainsFold applies the ContainsFold predicate on the "latest_version" field.
func LatestVersionContainsFold(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContainsFold(FieldLatestVersion, v))
}

// MinimumVersionEQ applies the EQ predicate on the "minimum_version" field.
func MinimumVersionEQ(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldMinimumVersion, v))
}

// MinimumVersionNEQ applies the NEQ predicate on the "minimum_version" field.
func MinimumVersionNEQ(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNEQ(FieldMinimumVersion, v))
}

// MinimumVersionIn applies the In predicate on the "minimum_version" field.
func MinimumVersionIn(vs ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldIn(FieldMinimumVersion, vs...))
}

// MinimumVersionNotIn applies the NotIn predicate on the "minimum_version" field.
func MinimumVersionNotIn(vs ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNotIn(FieldMinimumVersion, vs...))
}

// MinimumVersionGT applies the GT predicate on the "minimum_version" field.
func MinimumVersionGT(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGT(FieldMinimumVersion, v))
}

// MinimumVersionGTE applies the GTE predicate on the "minimum_version" field.
func MinimumVersionGTE(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGTE(FieldMinimumVersion, v))
}

// MinimumVersionLT applies the LT predicate on the "minimum_version" field.
func MinimumVersionLT(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLT(FieldMinimumVersion, v))
}

// MinimumVersionLTE applies the LTE predicate on the "minimum_version" field.
func MinimumVersionLTE(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLTE(FieldMinimumVersion, v))
}

// MinimumVersionContains applies the Contains predicate on the "minimum_version" field.
func MinimumVersionContains(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContains(FieldMinimumVersion, v))
}

// MinimumVersionHasPrefix applies the HasPrefix predicate on the "minimum_version" field.
func MinimumVersionHasPrefix(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldHasPrefix(FieldMinimumVersion, v))
}

// MinimumVersionHasSuffix applies the HasSuffix predicate on the "minimum_version" field.
func MinimumVersionHasSuffix(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldHasSuffix(FieldMinimumVersion, v))
}

// MinimumVersionEqualFold applies the EqualFold predicate on the "minimum_version" field.
func MinimumVersionEqualFold(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEqualFold(FieldMinimumVersion, v))
}

// MinimumVersionContainsFold applies the ContainsFold predicate on the "minimum_version" field.
func MinimumVersionContainsFold(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContainsFold(FieldMinimumVersion, v))
}

// DownloadURLEQ applies the EQ predicate on the "download_url" field.
func DownloadURLEQ(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldDownloadURL, v))
}

// DownloadURLNEQ applies the NEQ predicate on the "download_url" field.
func DownloadURLNEQ(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNEQ(FieldDownloadURL, v))
}

// DownloadURLIn applies the In predicate on the "download_url" field.
func DownloadURLIn(vs ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldIn(FieldDownloadURL, vs...))
}

// DownloadURLNotIn applies the NotIn predicate on the "download_url" field.
func DownloadURLNotIn(vs ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNotIn(FieldDownloadURL, vs...))
}

// DownloadURLGT applies the GT predicate on the "download_url" field.
func DownloadURLGT(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGT(FieldDownloadURL, v))
}

// DownloadURLGTE applies the GTE predicate on the "download_url" field.
func DownloadURLGTE(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGTE(FieldDownloadURL, v))
}

// DownloadURLLT applies the LT predicate on the "download_url" field.
func DownloadURLLT(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLT(FieldDownloadURL, v))
}

// DownloadURLLTE applies the LTE predicate on the "download_url" field.
func DownloadURLLTE(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLTE(FieldDownloadURL, v))
}

// DownloadURLContains applies the Contains predicate on the "download_url" field.
func DownloadURLContains(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContains(FieldDownloadURL, v))
}

// DownloadURLHasPrefix applies the HasPrefix predicate on the "download_url" field.
func DownloadURLHasPrefix(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldHasPrefix(FieldDownloadURL, v))
}

// DownloadURLHasSuffix applies the HasSuffix predicate on the "download_url" field.
func DownloadURLHasSuffix(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldHasSuffix(FieldDownloadURL, v))
}

// DownloadURLEqualFold applies the EqualFold predicate on the "download_url" field.
func DownloadURLEqualFold(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEqualFold(FieldDownloadURL, v))
}

// DownloadURLContainsFold applies the ContainsFold predicate on the "download_url" field.
func DownloadURLContainsFold(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContainsFold(FieldDownloadURL, v))
}

// ReleaseNotesEQ applies the EQ predicate on the "release_notes" field.
func ReleaseNotesEQ(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldReleaseNotes, v))
}

// ReleaseNotesNEQ applies the NEQ predicate on the "release_notes" field.
func ReleaseNotesNEQ(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNEQ(FieldReleaseNotes, v))
}

// ReleaseNotesIn applies the In predicate on the "release_notes" field.
func ReleaseNotesIn(vs ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldIn(FieldReleaseNotes, vs...))
}

// ReleaseNotesNotIn applies the NotIn predicate on the "release_notes" field.
func ReleaseNotesNotIn(vs ...string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNotIn(FieldReleaseNotes, vs...))
}

// ReleaseNotesGT applies the GT predicate on the "release_notes" field.
func ReleaseNotesGT(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGT(FieldReleaseNotes, v))
}

// ReleaseNotesGTE applies the GTE predicate on the "release_notes" field.
func ReleaseNotesGTE(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGTE(FieldReleaseNotes, v))
}

// ReleaseNotesLT applies the LT predicate on the "release_notes" field.
func ReleaseNotesLT(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLT(FieldReleaseNotes, v))
}

// ReleaseNotesLTE applies the LTE predicate on the "release_notes" field.
func ReleaseNotesLTE(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLTE(FieldReleaseNotes, v))
}

// ReleaseNotesContains applies the Contains predicate on the "release_notes" field.
func ReleaseNotesContains(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContains(FieldReleaseNotes, v))
}

// ReleaseNotesHasPrefix applies the HasPrefix predicate on the "release_notes" field.
func ReleaseNotesHasPrefix(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldHasPrefix(FieldReleaseNotes, v))
}

// ReleaseNotesHasSuffix applies the HasSuffix predicate on the "release_notes" field.
func ReleaseNotesHasSuffix(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldHasSuffix(FieldReleaseNotes, v))
}

// ReleaseNotesIsNil applies the IsNil predicate on the "release_notes" field.
func ReleaseNotesIsNil() predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldIsNull(FieldReleaseNotes))
}

// ReleaseNotesNotNil applies the NotNil predicate on the "release_notes" field.
func ReleaseNotesNotNil() predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNotNull(FieldReleaseNotes))
}

// ReleaseNotesEqualFold applies the EqualFold predicate on the "release_notes" field.
func ReleaseNotesEqualFold(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEqualFold(FieldReleaseNotes, v))
}

// ReleaseNotesContainsFold applies the ContainsFold predicate on the "release_notes" field.
func ReleaseNotesContainsFold(v string) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldContainsFold(FieldReleaseNotes, v))
}

// AutoUpdateEnabledEQ applies the EQ predicate on the "auto_update_enabled" field.
func AutoUpdateEnabledEQ(v bool) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldAutoUpdateEnabled, v))
}

// AutoUpdateEnabledNEQ applies the NEQ predicate on the "auto_update_enabled" field.
func AutoUpdateEnabledNEQ(v bool) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNEQ(FieldAutoUpdateEnabled, v))
}

// ForceUpdateEQ applies the EQ predicate on the "force_update" field.
func ForceUpdateEQ(v bool) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldForceUpdate, v))
}

// ForceUpdateNEQ applies the NEQ predicate on the "force_update" field.
func ForceUpdateNEQ(v bool) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNEQ(FieldForceUpdate, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ClientVersion {
	return predicate.ClientVersion(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ClientVersion) predicate.ClientVersion {
	return predicate.ClientVersion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ClientVersion) predicate.ClientVersion {
	return predicate.ClientVersion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ClientVersion) predicate.ClientVersion {
	return predicate.ClientVersion(sql.NotPredicates(p))
}
