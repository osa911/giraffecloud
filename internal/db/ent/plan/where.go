// Code generated by ent, DO NOT EDIT.

package plan

import (
	"giraffecloud/internal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldName, v))
}

// MonthlyLimitBytes applies equality check predicate on the "monthly_limit_bytes" field. It's identical to MonthlyLimitBytesEQ.
func MonthlyLimitBytes(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldMonthlyLimitBytes, v))
}

// OveragePerGBCents applies equality check predicate on the "overage_per_gb_cents" field. It's identical to OveragePerGBCentsEQ.
func OveragePerGBCents(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldOveragePerGBCents, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldName, v))
}

// MonthlyLimitBytesEQ applies the EQ predicate on the "monthly_limit_bytes" field.
func MonthlyLimitBytesEQ(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldMonthlyLimitBytes, v))
}

// MonthlyLimitBytesNEQ applies the NEQ predicate on the "monthly_limit_bytes" field.
func MonthlyLimitBytesNEQ(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldMonthlyLimitBytes, v))
}

// MonthlyLimitBytesIn applies the In predicate on the "monthly_limit_bytes" field.
func MonthlyLimitBytesIn(vs ...int64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldMonthlyLimitBytes, vs...))
}

// MonthlyLimitBytesNotIn applies the NotIn predicate on the "monthly_limit_bytes" field.
func MonthlyLimitBytesNotIn(vs ...int64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldMonthlyLimitBytes, vs...))
}

// MonthlyLimitBytesGT applies the GT predicate on the "monthly_limit_bytes" field.
func MonthlyLimitBytesGT(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldMonthlyLimitBytes, v))
}

// MonthlyLimitBytesGTE applies the GTE predicate on the "monthly_limit_bytes" field.
func MonthlyLimitBytesGTE(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldMonthlyLimitBytes, v))
}

// MonthlyLimitBytesLT applies the LT predicate on the "monthly_limit_bytes" field.
func MonthlyLimitBytesLT(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldMonthlyLimitBytes, v))
}

// MonthlyLimitBytesLTE applies the LTE predicate on the "monthly_limit_bytes" field.
func MonthlyLimitBytesLTE(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldMonthlyLimitBytes, v))
}

// OveragePerGBCentsEQ applies the EQ predicate on the "overage_per_gb_cents" field.
func OveragePerGBCentsEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldOveragePerGBCents, v))
}

// OveragePerGBCentsNEQ applies the NEQ predicate on the "overage_per_gb_cents" field.
func OveragePerGBCentsNEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldOveragePerGBCents, v))
}

// OveragePerGBCentsIn applies the In predicate on the "overage_per_gb_cents" field.
func OveragePerGBCentsIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldOveragePerGBCents, vs...))
}

// OveragePerGBCentsNotIn applies the NotIn predicate on the "overage_per_gb_cents" field.
func OveragePerGBCentsNotIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldOveragePerGBCents, vs...))
}

// OveragePerGBCentsGT applies the GT predicate on the "overage_per_gb_cents" field.
func OveragePerGBCentsGT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldOveragePerGBCents, v))
}

// OveragePerGBCentsGTE applies the GTE predicate on the "overage_per_gb_cents" field.
func OveragePerGBCentsGTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldOveragePerGBCents, v))
}

// OveragePerGBCentsLT applies the LT predicate on the "overage_per_gb_cents" field.
func OveragePerGBCentsLT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldOveragePerGBCents, v))
}

// OveragePerGBCentsLTE applies the LTE predicate on the "overage_per_gb_cents" field.
func OveragePerGBCentsLTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldOveragePerGBCents, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldActive, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Plan) predicate.Plan {
	return predicate.Plan(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Plan) predicate.Plan {
	return predicate.Plan(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Plan) predicate.Plan {
	return predicate.Plan(sql.NotPredicates(p))
}
