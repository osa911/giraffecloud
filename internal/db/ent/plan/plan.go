// Code generated by ent, DO NOT EDIT.

package plan

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the plan type in the database.
	Label = "plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMonthlyLimitBytes holds the string denoting the monthly_limit_bytes field in the database.
	FieldMonthlyLimitBytes = "monthly_limit_bytes"
	// FieldOveragePerGBCents holds the string denoting the overage_per_gb_cents field in the database.
	FieldOveragePerGBCents = "overage_per_gb_cents"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// Table holds the table name of the plan in the database.
	Table = "plans"
)

// Columns holds all SQL columns for plan fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldMonthlyLimitBytes,
	FieldOveragePerGBCents,
	FieldActive,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultMonthlyLimitBytes holds the default value on creation for the "monthly_limit_bytes" field.
	DefaultMonthlyLimitBytes int64
	// DefaultOveragePerGBCents holds the default value on creation for the "overage_per_gb_cents" field.
	DefaultOveragePerGBCents int
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
)

// OrderOption defines the ordering options for the Plan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByMonthlyLimitBytes orders the results by the monthly_limit_bytes field.
func ByMonthlyLimitBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMonthlyLimitBytes, opts...).ToFunc()
}

// ByOveragePerGBCents orders the results by the overage_per_gb_cents field.
func ByOveragePerGBCents(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOveragePerGBCents, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}
