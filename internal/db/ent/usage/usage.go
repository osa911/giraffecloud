// Code generated by ent, DO NOT EDIT.

package usage

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the usage type in the database.
	Label = "usage"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPeriodStart holds the string denoting the period_start field in the database.
	FieldPeriodStart = "period_start"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTunnelID holds the string denoting the tunnel_id field in the database.
	FieldTunnelID = "tunnel_id"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// FieldBytesIn holds the string denoting the bytes_in field in the database.
	FieldBytesIn = "bytes_in"
	// FieldBytesOut holds the string denoting the bytes_out field in the database.
	FieldBytesOut = "bytes_out"
	// FieldRequests holds the string denoting the requests field in the database.
	FieldRequests = "requests"
	// Table holds the table name of the usage in the database.
	Table = "usages"
)

// Columns holds all SQL columns for usage fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPeriodStart,
	FieldUserID,
	FieldTunnelID,
	FieldDomain,
	FieldBytesIn,
	FieldBytesOut,
	FieldRequests,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDomain holds the default value on creation for the "domain" field.
	DefaultDomain string
	// DefaultBytesIn holds the default value on creation for the "bytes_in" field.
	DefaultBytesIn int64
	// DefaultBytesOut holds the default value on creation for the "bytes_out" field.
	DefaultBytesOut int64
	// DefaultRequests holds the default value on creation for the "requests" field.
	DefaultRequests int64
)

// OrderOption defines the ordering options for the Usage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPeriodStart orders the results by the period_start field.
func ByPeriodStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriodStart, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTunnelID orders the results by the tunnel_id field.
func ByTunnelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTunnelID, opts...).ToFunc()
}

// ByDomain orders the results by the domain field.
func ByDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomain, opts...).ToFunc()
}

// ByBytesIn orders the results by the bytes_in field.
func ByBytesIn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBytesIn, opts...).ToFunc()
}

// ByBytesOut orders the results by the bytes_out field.
func ByBytesOut(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBytesOut, opts...).ToFunc()
}

// ByRequests orders the results by the requests field.
func ByRequests(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequests, opts...).ToFunc()
}
