// Code generated by ent, DO NOT EDIT.

package usage

import (
	"giraffecloud/internal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Usage {
	return predicate.Usage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Usage {
	return predicate.Usage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Usage {
	return predicate.Usage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Usage {
	return predicate.Usage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Usage {
	return predicate.Usage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Usage {
	return predicate.Usage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Usage {
	return predicate.Usage(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldUpdatedAt, v))
}

// PeriodStart applies equality check predicate on the "period_start" field. It's identical to PeriodStartEQ.
func PeriodStart(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldPeriodStart, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint32) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldUserID, v))
}

// TunnelID applies equality check predicate on the "tunnel_id" field. It's identical to TunnelIDEQ.
func TunnelID(v uint32) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldTunnelID, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldDomain, v))
}

// BytesIn applies equality check predicate on the "bytes_in" field. It's identical to BytesInEQ.
func BytesIn(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldBytesIn, v))
}

// BytesOut applies equality check predicate on the "bytes_out" field. It's identical to BytesOutEQ.
func BytesOut(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldBytesOut, v))
}

// Requests applies equality check predicate on the "requests" field. It's identical to RequestsEQ.
func Requests(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldRequests, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldLTE(FieldUpdatedAt, v))
}

// PeriodStartEQ applies the EQ predicate on the "period_start" field.
func PeriodStartEQ(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldPeriodStart, v))
}

// PeriodStartNEQ applies the NEQ predicate on the "period_start" field.
func PeriodStartNEQ(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldNEQ(FieldPeriodStart, v))
}

// PeriodStartIn applies the In predicate on the "period_start" field.
func PeriodStartIn(vs ...time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldIn(FieldPeriodStart, vs...))
}

// PeriodStartNotIn applies the NotIn predicate on the "period_start" field.
func PeriodStartNotIn(vs ...time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldNotIn(FieldPeriodStart, vs...))
}

// PeriodStartGT applies the GT predicate on the "period_start" field.
func PeriodStartGT(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldGT(FieldPeriodStart, v))
}

// PeriodStartGTE applies the GTE predicate on the "period_start" field.
func PeriodStartGTE(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldGTE(FieldPeriodStart, v))
}

// PeriodStartLT applies the LT predicate on the "period_start" field.
func PeriodStartLT(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldLT(FieldPeriodStart, v))
}

// PeriodStartLTE applies the LTE predicate on the "period_start" field.
func PeriodStartLTE(v time.Time) predicate.Usage {
	return predicate.Usage(sql.FieldLTE(FieldPeriodStart, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint32) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint32) predicate.Usage {
	return predicate.Usage(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint32) predicate.Usage {
	return predicate.Usage(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint32) predicate.Usage {
	return predicate.Usage(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uint32) predicate.Usage {
	return predicate.Usage(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uint32) predicate.Usage {
	return predicate.Usage(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uint32) predicate.Usage {
	return predicate.Usage(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uint32) predicate.Usage {
	return predicate.Usage(sql.FieldLTE(FieldUserID, v))
}

// TunnelIDEQ applies the EQ predicate on the "tunnel_id" field.
func TunnelIDEQ(v uint32) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldTunnelID, v))
}

// TunnelIDNEQ applies the NEQ predicate on the "tunnel_id" field.
func TunnelIDNEQ(v uint32) predicate.Usage {
	return predicate.Usage(sql.FieldNEQ(FieldTunnelID, v))
}

// TunnelIDIn applies the In predicate on the "tunnel_id" field.
func TunnelIDIn(vs ...uint32) predicate.Usage {
	return predicate.Usage(sql.FieldIn(FieldTunnelID, vs...))
}

// TunnelIDNotIn applies the NotIn predicate on the "tunnel_id" field.
func TunnelIDNotIn(vs ...uint32) predicate.Usage {
	return predicate.Usage(sql.FieldNotIn(FieldTunnelID, vs...))
}

// TunnelIDGT applies the GT predicate on the "tunnel_id" field.
func TunnelIDGT(v uint32) predicate.Usage {
	return predicate.Usage(sql.FieldGT(FieldTunnelID, v))
}

// TunnelIDGTE applies the GTE predicate on the "tunnel_id" field.
func TunnelIDGTE(v uint32) predicate.Usage {
	return predicate.Usage(sql.FieldGTE(FieldTunnelID, v))
}

// TunnelIDLT applies the LT predicate on the "tunnel_id" field.
func TunnelIDLT(v uint32) predicate.Usage {
	return predicate.Usage(sql.FieldLT(FieldTunnelID, v))
}

// TunnelIDLTE applies the LTE predicate on the "tunnel_id" field.
func TunnelIDLTE(v uint32) predicate.Usage {
	return predicate.Usage(sql.FieldLTE(FieldTunnelID, v))
}

// TunnelIDIsNil applies the IsNil predicate on the "tunnel_id" field.
func TunnelIDIsNil() predicate.Usage {
	return predicate.Usage(sql.FieldIsNull(FieldTunnelID))
}

// TunnelIDNotNil applies the NotNil predicate on the "tunnel_id" field.
func TunnelIDNotNil() predicate.Usage {
	return predicate.Usage(sql.FieldNotNull(FieldTunnelID))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Usage {
	return predicate.Usage(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Usage {
	return predicate.Usage(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Usage {
	return predicate.Usage(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Usage {
	return predicate.Usage(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Usage {
	return predicate.Usage(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Usage {
	return predicate.Usage(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Usage {
	return predicate.Usage(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Usage {
	return predicate.Usage(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Usage {
	return predicate.Usage(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Usage {
	return predicate.Usage(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Usage {
	return predicate.Usage(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Usage {
	return predicate.Usage(sql.FieldContainsFold(FieldDomain, v))
}

// BytesInEQ applies the EQ predicate on the "bytes_in" field.
func BytesInEQ(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldBytesIn, v))
}

// BytesInNEQ applies the NEQ predicate on the "bytes_in" field.
func BytesInNEQ(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldNEQ(FieldBytesIn, v))
}

// BytesInIn applies the In predicate on the "bytes_in" field.
func BytesInIn(vs ...int64) predicate.Usage {
	return predicate.Usage(sql.FieldIn(FieldBytesIn, vs...))
}

// BytesInNotIn applies the NotIn predicate on the "bytes_in" field.
func BytesInNotIn(vs ...int64) predicate.Usage {
	return predicate.Usage(sql.FieldNotIn(FieldBytesIn, vs...))
}

// BytesInGT applies the GT predicate on the "bytes_in" field.
func BytesInGT(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldGT(FieldBytesIn, v))
}

// BytesInGTE applies the GTE predicate on the "bytes_in" field.
func BytesInGTE(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldGTE(FieldBytesIn, v))
}

// BytesInLT applies the LT predicate on the "bytes_in" field.
func BytesInLT(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldLT(FieldBytesIn, v))
}

// BytesInLTE applies the LTE predicate on the "bytes_in" field.
func BytesInLTE(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldLTE(FieldBytesIn, v))
}

// BytesOutEQ applies the EQ predicate on the "bytes_out" field.
func BytesOutEQ(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldBytesOut, v))
}

// BytesOutNEQ applies the NEQ predicate on the "bytes_out" field.
func BytesOutNEQ(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldNEQ(FieldBytesOut, v))
}

// BytesOutIn applies the In predicate on the "bytes_out" field.
func BytesOutIn(vs ...int64) predicate.Usage {
	return predicate.Usage(sql.FieldIn(FieldBytesOut, vs...))
}

// BytesOutNotIn applies the NotIn predicate on the "bytes_out" field.
func BytesOutNotIn(vs ...int64) predicate.Usage {
	return predicate.Usage(sql.FieldNotIn(FieldBytesOut, vs...))
}

// BytesOutGT applies the GT predicate on the "bytes_out" field.
func BytesOutGT(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldGT(FieldBytesOut, v))
}

// BytesOutGTE applies the GTE predicate on the "bytes_out" field.
func BytesOutGTE(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldGTE(FieldBytesOut, v))
}

// BytesOutLT applies the LT predicate on the "bytes_out" field.
func BytesOutLT(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldLT(FieldBytesOut, v))
}

// BytesOutLTE applies the LTE predicate on the "bytes_out" field.
func BytesOutLTE(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldLTE(FieldBytesOut, v))
}

// RequestsEQ applies the EQ predicate on the "requests" field.
func RequestsEQ(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldEQ(FieldRequests, v))
}

// RequestsNEQ applies the NEQ predicate on the "requests" field.
func RequestsNEQ(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldNEQ(FieldRequests, v))
}

// RequestsIn applies the In predicate on the "requests" field.
func RequestsIn(vs ...int64) predicate.Usage {
	return predicate.Usage(sql.FieldIn(FieldRequests, vs...))
}

// RequestsNotIn applies the NotIn predicate on the "requests" field.
func RequestsNotIn(vs ...int64) predicate.Usage {
	return predicate.Usage(sql.FieldNotIn(FieldRequests, vs...))
}

// RequestsGT applies the GT predicate on the "requests" field.
func RequestsGT(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldGT(FieldRequests, v))
}

// RequestsGTE applies the GTE predicate on the "requests" field.
func RequestsGTE(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldGTE(FieldRequests, v))
}

// RequestsLT applies the LT predicate on the "requests" field.
func RequestsLT(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldLT(FieldRequests, v))
}

// RequestsLTE applies the LTE predicate on the "requests" field.
func RequestsLTE(v int64) predicate.Usage {
	return predicate.Usage(sql.FieldLTE(FieldRequests, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Usage) predicate.Usage {
	return predicate.Usage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Usage) predicate.Usage {
	return predicate.Usage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Usage) predicate.Usage {
	return predicate.Usage(sql.NotPredicates(p))
}
