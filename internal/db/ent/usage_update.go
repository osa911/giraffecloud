// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"giraffecloud/internal/db/ent/predicate"
	"giraffecloud/internal/db/ent/usage"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UsageUpdate is the builder for updating Usage entities.
type UsageUpdate struct {
	config
	hooks    []Hook
	mutation *UsageMutation
}

// Where appends a list predicates to the UsageUpdate builder.
func (uu *UsageUpdate) Where(ps ...predicate.Usage) *UsageUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UsageUpdate) SetUpdatedAt(t time.Time) *UsageUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetPeriodStart sets the "period_start" field.
func (uu *UsageUpdate) SetPeriodStart(t time.Time) *UsageUpdate {
	uu.mutation.SetPeriodStart(t)
	return uu
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (uu *UsageUpdate) SetNillablePeriodStart(t *time.Time) *UsageUpdate {
	if t != nil {
		uu.SetPeriodStart(*t)
	}
	return uu
}

// SetUserID sets the "user_id" field.
func (uu *UsageUpdate) SetUserID(u uint32) *UsageUpdate {
	uu.mutation.ResetUserID()
	uu.mutation.SetUserID(u)
	return uu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uu *UsageUpdate) SetNillableUserID(u *uint32) *UsageUpdate {
	if u != nil {
		uu.SetUserID(*u)
	}
	return uu
}

// AddUserID adds u to the "user_id" field.
func (uu *UsageUpdate) AddUserID(u int32) *UsageUpdate {
	uu.mutation.AddUserID(u)
	return uu
}

// SetTunnelID sets the "tunnel_id" field.
func (uu *UsageUpdate) SetTunnelID(u uint32) *UsageUpdate {
	uu.mutation.ResetTunnelID()
	uu.mutation.SetTunnelID(u)
	return uu
}

// SetNillableTunnelID sets the "tunnel_id" field if the given value is not nil.
func (uu *UsageUpdate) SetNillableTunnelID(u *uint32) *UsageUpdate {
	if u != nil {
		uu.SetTunnelID(*u)
	}
	return uu
}

// AddTunnelID adds u to the "tunnel_id" field.
func (uu *UsageUpdate) AddTunnelID(u int32) *UsageUpdate {
	uu.mutation.AddTunnelID(u)
	return uu
}

// ClearTunnelID clears the value of the "tunnel_id" field.
func (uu *UsageUpdate) ClearTunnelID() *UsageUpdate {
	uu.mutation.ClearTunnelID()
	return uu
}

// SetDomain sets the "domain" field.
func (uu *UsageUpdate) SetDomain(s string) *UsageUpdate {
	uu.mutation.SetDomain(s)
	return uu
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (uu *UsageUpdate) SetNillableDomain(s *string) *UsageUpdate {
	if s != nil {
		uu.SetDomain(*s)
	}
	return uu
}

// SetBytesIn sets the "bytes_in" field.
func (uu *UsageUpdate) SetBytesIn(i int64) *UsageUpdate {
	uu.mutation.ResetBytesIn()
	uu.mutation.SetBytesIn(i)
	return uu
}

// SetNillableBytesIn sets the "bytes_in" field if the given value is not nil.
func (uu *UsageUpdate) SetNillableBytesIn(i *int64) *UsageUpdate {
	if i != nil {
		uu.SetBytesIn(*i)
	}
	return uu
}

// AddBytesIn adds i to the "bytes_in" field.
func (uu *UsageUpdate) AddBytesIn(i int64) *UsageUpdate {
	uu.mutation.AddBytesIn(i)
	return uu
}

// SetBytesOut sets the "bytes_out" field.
func (uu *UsageUpdate) SetBytesOut(i int64) *UsageUpdate {
	uu.mutation.ResetBytesOut()
	uu.mutation.SetBytesOut(i)
	return uu
}

// SetNillableBytesOut sets the "bytes_out" field if the given value is not nil.
func (uu *UsageUpdate) SetNillableBytesOut(i *int64) *UsageUpdate {
	if i != nil {
		uu.SetBytesOut(*i)
	}
	return uu
}

// AddBytesOut adds i to the "bytes_out" field.
func (uu *UsageUpdate) AddBytesOut(i int64) *UsageUpdate {
	uu.mutation.AddBytesOut(i)
	return uu
}

// SetRequests sets the "requests" field.
func (uu *UsageUpdate) SetRequests(i int64) *UsageUpdate {
	uu.mutation.ResetRequests()
	uu.mutation.SetRequests(i)
	return uu
}

// SetNillableRequests sets the "requests" field if the given value is not nil.
func (uu *UsageUpdate) SetNillableRequests(i *int64) *UsageUpdate {
	if i != nil {
		uu.SetRequests(*i)
	}
	return uu
}

// AddRequests adds i to the "requests" field.
func (uu *UsageUpdate) AddRequests(i int64) *UsageUpdate {
	uu.mutation.AddRequests(i)
	return uu
}

// Mutation returns the UsageMutation object of the builder.
func (uu *UsageUpdate) Mutation() *UsageMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UsageUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UsageUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UsageUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UsageUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UsageUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := usage.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

func (uu *UsageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usage.Table, usage.Columns, sqlgraph.NewFieldSpec(usage.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(usage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.PeriodStart(); ok {
		_spec.SetField(usage.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := uu.mutation.UserID(); ok {
		_spec.SetField(usage.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := uu.mutation.AddedUserID(); ok {
		_spec.AddField(usage.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := uu.mutation.TunnelID(); ok {
		_spec.SetField(usage.FieldTunnelID, field.TypeUint32, value)
	}
	if value, ok := uu.mutation.AddedTunnelID(); ok {
		_spec.AddField(usage.FieldTunnelID, field.TypeUint32, value)
	}
	if uu.mutation.TunnelIDCleared() {
		_spec.ClearField(usage.FieldTunnelID, field.TypeUint32)
	}
	if value, ok := uu.mutation.Domain(); ok {
		_spec.SetField(usage.FieldDomain, field.TypeString, value)
	}
	if value, ok := uu.mutation.BytesIn(); ok {
		_spec.SetField(usage.FieldBytesIn, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedBytesIn(); ok {
		_spec.AddField(usage.FieldBytesIn, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.BytesOut(); ok {
		_spec.SetField(usage.FieldBytesOut, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedBytesOut(); ok {
		_spec.AddField(usage.FieldBytesOut, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.Requests(); ok {
		_spec.SetField(usage.FieldRequests, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedRequests(); ok {
		_spec.AddField(usage.FieldRequests, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UsageUpdateOne is the builder for updating a single Usage entity.
type UsageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UsageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UsageUpdateOne) SetUpdatedAt(t time.Time) *UsageUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetPeriodStart sets the "period_start" field.
func (uuo *UsageUpdateOne) SetPeriodStart(t time.Time) *UsageUpdateOne {
	uuo.mutation.SetPeriodStart(t)
	return uuo
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (uuo *UsageUpdateOne) SetNillablePeriodStart(t *time.Time) *UsageUpdateOne {
	if t != nil {
		uuo.SetPeriodStart(*t)
	}
	return uuo
}

// SetUserID sets the "user_id" field.
func (uuo *UsageUpdateOne) SetUserID(u uint32) *UsageUpdateOne {
	uuo.mutation.ResetUserID()
	uuo.mutation.SetUserID(u)
	return uuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uuo *UsageUpdateOne) SetNillableUserID(u *uint32) *UsageUpdateOne {
	if u != nil {
		uuo.SetUserID(*u)
	}
	return uuo
}

// AddUserID adds u to the "user_id" field.
func (uuo *UsageUpdateOne) AddUserID(u int32) *UsageUpdateOne {
	uuo.mutation.AddUserID(u)
	return uuo
}

// SetTunnelID sets the "tunnel_id" field.
func (uuo *UsageUpdateOne) SetTunnelID(u uint32) *UsageUpdateOne {
	uuo.mutation.ResetTunnelID()
	uuo.mutation.SetTunnelID(u)
	return uuo
}

// SetNillableTunnelID sets the "tunnel_id" field if the given value is not nil.
func (uuo *UsageUpdateOne) SetNillableTunnelID(u *uint32) *UsageUpdateOne {
	if u != nil {
		uuo.SetTunnelID(*u)
	}
	return uuo
}

// AddTunnelID adds u to the "tunnel_id" field.
func (uuo *UsageUpdateOne) AddTunnelID(u int32) *UsageUpdateOne {
	uuo.mutation.AddTunnelID(u)
	return uuo
}

// ClearTunnelID clears the value of the "tunnel_id" field.
func (uuo *UsageUpdateOne) ClearTunnelID() *UsageUpdateOne {
	uuo.mutation.ClearTunnelID()
	return uuo
}

// SetDomain sets the "domain" field.
func (uuo *UsageUpdateOne) SetDomain(s string) *UsageUpdateOne {
	uuo.mutation.SetDomain(s)
	return uuo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (uuo *UsageUpdateOne) SetNillableDomain(s *string) *UsageUpdateOne {
	if s != nil {
		uuo.SetDomain(*s)
	}
	return uuo
}

// SetBytesIn sets the "bytes_in" field.
func (uuo *UsageUpdateOne) SetBytesIn(i int64) *UsageUpdateOne {
	uuo.mutation.ResetBytesIn()
	uuo.mutation.SetBytesIn(i)
	return uuo
}

// SetNillableBytesIn sets the "bytes_in" field if the given value is not nil.
func (uuo *UsageUpdateOne) SetNillableBytesIn(i *int64) *UsageUpdateOne {
	if i != nil {
		uuo.SetBytesIn(*i)
	}
	return uuo
}

// AddBytesIn adds i to the "bytes_in" field.
func (uuo *UsageUpdateOne) AddBytesIn(i int64) *UsageUpdateOne {
	uuo.mutation.AddBytesIn(i)
	return uuo
}

// SetBytesOut sets the "bytes_out" field.
func (uuo *UsageUpdateOne) SetBytesOut(i int64) *UsageUpdateOne {
	uuo.mutation.ResetBytesOut()
	uuo.mutation.SetBytesOut(i)
	return uuo
}

// SetNillableBytesOut sets the "bytes_out" field if the given value is not nil.
func (uuo *UsageUpdateOne) SetNillableBytesOut(i *int64) *UsageUpdateOne {
	if i != nil {
		uuo.SetBytesOut(*i)
	}
	return uuo
}

// AddBytesOut adds i to the "bytes_out" field.
func (uuo *UsageUpdateOne) AddBytesOut(i int64) *UsageUpdateOne {
	uuo.mutation.AddBytesOut(i)
	return uuo
}

// SetRequests sets the "requests" field.
func (uuo *UsageUpdateOne) SetRequests(i int64) *UsageUpdateOne {
	uuo.mutation.ResetRequests()
	uuo.mutation.SetRequests(i)
	return uuo
}

// SetNillableRequests sets the "requests" field if the given value is not nil.
func (uuo *UsageUpdateOne) SetNillableRequests(i *int64) *UsageUpdateOne {
	if i != nil {
		uuo.SetRequests(*i)
	}
	return uuo
}

// AddRequests adds i to the "requests" field.
func (uuo *UsageUpdateOne) AddRequests(i int64) *UsageUpdateOne {
	uuo.mutation.AddRequests(i)
	return uuo
}

// Mutation returns the UsageMutation object of the builder.
func (uuo *UsageUpdateOne) Mutation() *UsageMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UsageUpdate builder.
func (uuo *UsageUpdateOne) Where(ps ...predicate.Usage) *UsageUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UsageUpdateOne) Select(field string, fields ...string) *UsageUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Usage entity.
func (uuo *UsageUpdateOne) Save(ctx context.Context) (*Usage, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UsageUpdateOne) SaveX(ctx context.Context) *Usage {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UsageUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UsageUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UsageUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := usage.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

func (uuo *UsageUpdateOne) sqlSave(ctx context.Context) (_node *Usage, err error) {
	_spec := sqlgraph.NewUpdateSpec(usage.Table, usage.Columns, sqlgraph.NewFieldSpec(usage.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Usage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usage.FieldID)
		for _, f := range fields {
			if !usage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(usage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.PeriodStart(); ok {
		_spec.SetField(usage.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.UserID(); ok {
		_spec.SetField(usage.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := uuo.mutation.AddedUserID(); ok {
		_spec.AddField(usage.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := uuo.mutation.TunnelID(); ok {
		_spec.SetField(usage.FieldTunnelID, field.TypeUint32, value)
	}
	if value, ok := uuo.mutation.AddedTunnelID(); ok {
		_spec.AddField(usage.FieldTunnelID, field.TypeUint32, value)
	}
	if uuo.mutation.TunnelIDCleared() {
		_spec.ClearField(usage.FieldTunnelID, field.TypeUint32)
	}
	if value, ok := uuo.mutation.Domain(); ok {
		_spec.SetField(usage.FieldDomain, field.TypeString, value)
	}
	if value, ok := uuo.mutation.BytesIn(); ok {
		_spec.SetField(usage.FieldBytesIn, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedBytesIn(); ok {
		_spec.AddField(usage.FieldBytesIn, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.BytesOut(); ok {
		_spec.SetField(usage.FieldBytesOut, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedBytesOut(); ok {
		_spec.AddField(usage.FieldBytesOut, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.Requests(); ok {
		_spec.SetField(usage.FieldRequests, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedRequests(); ok {
		_spec.AddField(usage.FieldRequests, field.TypeInt64, value)
	}
	_node = &Usage{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
