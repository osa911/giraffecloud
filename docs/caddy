{
    # Use Unix socket for admin API - more secure and no IP binding issues
    admin unix//run/caddy/admin.sock
    auto_https disable_redirects
}

osa911.com {
    respond "Forbidden" 403
}

photo.osa911.com {
    reverse_proxy localhost:2283
}

# GIRAFFE CLOUD Backend Server
api.giraffecloud.xyz {

    # Enable compression
    encode gzip zstd

    # Reverse proxy to your Go API server running in Docker
    reverse_proxy localhost:8080 {
        health_path /health
        health_interval 30s

        # Header forwarding
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Proto {scheme}
    }

    # Handle preflight OPTIONS requests
    @cors_preflight {
      method OPTIONS
      header Origin *
      header Access-Control-Request-Method *
    }

    # Global security headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        Permissions-Policy "interest-cohort=()"
        X-XSS-Protection "1; mode=block"
        X-Content-Type-Options "nosniff"
        Referrer-Policy "strict-origin-when-cross-origin"
        Content-Security-Policy "default-src 'self'; frame-ancestors 'none'; form-action 'self'"
        -Server
    }

    # CORS headers for preflight requests
    handle @cors_preflight {
        header {
            Access-Control-Allow-Origin "{http.request.header.Origin}"
            Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
            Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
            Access-Control-Allow-Credentials true
            Access-Control-Max-Age 86400
        }
        respond "" 204
    }

    # CORS headers for all other requests
    @allowed_origins {
        header_regexp Origin (https://giraffecloud\.xyz|https://www\.giraffecloud\.xyz|http://localhost:3000)
    }

    header @allowed_origins {
        Access-Control-Allow-Origin "{http.request.header.Origin}"
        Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
        Access-Control-Allow-Credentials true
        defer
    }

    # Friendly error handling
    handle_errors {
        respond "{http.error.status_code} {http.error.status_text}" {http.error.status_code}
    }
}